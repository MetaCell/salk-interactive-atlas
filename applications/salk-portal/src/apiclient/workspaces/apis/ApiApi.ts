/* tslint:disable */
/* eslint-disable */
/**
 * Workspaces
 * API for all experiments...
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Experiment,
    ExperimentFromJSON,
    ExperimentToJSON,
} from '../models';

export interface CreateExperimentRequest {
    experiment?: Experiment;
}

export interface DestroyExperimentRequest {
    id: string;
}

export interface PartialUpdateExperimentRequest {
    id: string;
    experiment?: Experiment;
}

export interface RetrieveExperimentRequest {
    id: string;
}

export interface UpdateExperimentRequest {
    id: string;
    experiment?: Experiment;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async createExperimentRaw(requestParameters: CreateExperimentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Experiment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/experiment/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExperimentToJSON(requestParameters.experiment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async createExperiment(requestParameters: CreateExperimentRequest, initOverrides?: RequestInit): Promise<Experiment> {
        const response = await this.createExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async destroyExperimentRaw(requestParameters: DestroyExperimentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyExperiment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/experiment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async destroyExperiment(requestParameters: DestroyExperimentRequest, initOverrides?: RequestInit): Promise<void> {
        await this.destroyExperimentRaw(requestParameters, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async listExperimentsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Experiment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/experiment/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExperimentFromJSON));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async listExperiments(initOverrides?: RequestInit): Promise<Array<Experiment>> {
        const response = await this.listExperimentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async partialUpdateExperimentRaw(requestParameters: PartialUpdateExperimentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Experiment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateExperiment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/experiment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ExperimentToJSON(requestParameters.experiment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async partialUpdateExperiment(requestParameters: PartialUpdateExperimentRequest, initOverrides?: RequestInit): Promise<Experiment> {
        const response = await this.partialUpdateExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async retrieveExperimentRaw(requestParameters: RetrieveExperimentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Experiment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveExperiment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/experiment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async retrieveExperiment(requestParameters: RetrieveExperimentRequest, initOverrides?: RequestInit): Promise<Experiment> {
        const response = await this.retrieveExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async updateExperimentRaw(requestParameters: UpdateExperimentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Experiment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateExperiment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/experiment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExperimentToJSON(requestParameters.experiment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentFromJSON(jsonValue));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.  Additionally we also provide an extra `magic` action.
     */
    async updateExperiment(requestParameters: UpdateExperimentRequest, initOverrides?: RequestInit): Promise<Experiment> {
        const response = await this.updateExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
