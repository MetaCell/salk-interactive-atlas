{"version":3,"sources":["../src/ModelManager.js"],"names":["loadModel","model","ModelFactory","cleanModel","console","timeEnd","Resources","PARSING_MODEL","time","CREATING_MODEL","window","Model","createGeppettoModel","CREATING_INSTANCES","getCurrentWorld","Instances","getInstances","push","apply","instantiateVariables","LOADING_PROJECT","addVariableToModel","rawModel","diffReport","mergeModel","newInstances","createInstancesFromDiffReport"],"mappings":";;;;;;;;;AAQA;;AACA;;AAEA;;;;AAXA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACO,SAASA,SAAT,CAAoBC,KAApB,EAA2B;AAChCC,2BAAaC,UAAb;;AACAC,EAAAA,OAAO,CAACC,OAAR,CAAgBC,sBAAUC,aAA1B;AAEAH,EAAAA,OAAO,CAACI,IAAR,CAAaF,sBAAUG,cAAvB,EAJgC,CAMhC;;AACAC,EAAAA,MAAM,CAACC,KAAP,GAAeT,yBAAaU,mBAAb,CAAiCX,KAAjC,EAAwC,IAAxC,EAA8C,IAA9C,CAAf;AACAG,EAAAA,OAAO,CAACC,OAAR,CAAgBC,sBAAUG,cAA1B;AAEAL,EAAAA,OAAO,CAACI,IAAR,CAAaF,sBAAUO,kBAAvB,EAVgC,CAahC;;AACA,MAAIH,MAAM,CAACC,KAAP,CAAaG,eAAb,EAAJ,EAAoC;AAClCJ,IAAAA,MAAM,CAACK,SAAP,GAAmBL,MAAM,CAACC,KAAP,CAAaG,eAAb,GAA+BE,YAA/B,EAAnB;AACAN,IAAAA,MAAM,CAACK,SAAP,CAAiBE,IAAjB,CAAsBC,KAAtB,CAA4BR,MAAM,CAACK,SAAnC,EAA8Cb,yBAAaiB,oBAAb,CAAkCT,MAAM,CAACC,KAAzC,CAA9C;AACD,GAHD,MAGO;AACLD,IAAAA,MAAM,CAACK,SAAP,GAAmBb,yBAAaiB,oBAAb,CAAkCT,MAAM,CAACC,KAAzC,CAAnB;AACD;;AAED,wCAAsBD,MAAM,CAACK,SAA7B;AACAX,EAAAA,OAAO,CAACC,OAAR,CAAgBC,sBAAUO,kBAA1B;AAEAT,EAAAA,OAAO,CAACC,OAAR,CAAgBC,sBAAUc,eAA1B;AAEA,SAAOV,MAAM,CAACC,KAAd;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASU,kBAAT,CAA6BC,QAA7B,EAAuC;AAC5C;AACA,MAAMC,UAAU,GAAGrB,yBAAasB,UAAb,CAAwBF,QAAxB,CAAnB,CAF4C,CAG5C;;;AACA,MAAMG,YAAY,GAAGvB,yBAAawB,6BAAb,CAA2CH,UAA3C,CAArB;;AACA,SAAOE,YAAP;AAED;;eAEc;AAAEzB,EAAAA,SAAS,EAATA,SAAF;AAAaqB,EAAAA,kBAAkB,EAAlBA;AAAb,C","sourcesContent":["/**\n * Client class use to handle Geppetto workflows\n *\n * @module Manager\n * @author Matteo Cantarelli\n */\n\n\nimport ModelFactory from './ModelFactory';\nimport Resources from './Resources';\n\nimport { augmentInstancesArray } from './Instances';\n\n\n/**\n *\n * @param payload\n */\nexport function loadModel (model) {\n  ModelFactory.cleanModel();\n  console.timeEnd(Resources.PARSING_MODEL);\n\n  console.time(Resources.CREATING_MODEL);\n\n  // build Geppetto model here (once off operation when project is loaded)\n  window.Model = ModelFactory.createGeppettoModel(model, true, true);\n  console.timeEnd(Resources.CREATING_MODEL);\n\n  console.time(Resources.CREATING_INSTANCES);\n\n\n  // Initialize instances with static instances already present in the model\n  if (window.Model.getCurrentWorld()) {\n    window.Instances = window.Model.getCurrentWorld().getInstances();\n    window.Instances.push.apply(window.Instances, ModelFactory.instantiateVariables(window.Model));\n  } else {\n    window.Instances = ModelFactory.instantiateVariables(window.Model);\n  }\n\n  augmentInstancesArray(window.Instances);\n  console.timeEnd(Resources.CREATING_INSTANCES);\n\n  console.timeEnd(Resources.LOADING_PROJECT);\n\n  return window.Model;\n}\n\n/**\n * Adds fetched variable to model\n *\n * @param rawModel\n */\nexport function addVariableToModel (rawModel) {\n  // STEP 1: merge model - expect a fully formed Geppetto model to be merged into current one\n  const diffReport = ModelFactory.mergeModel(rawModel);\n  // STEP 2: add new instances for new variables if any\n  const newInstances = ModelFactory.createInstancesFromDiffReport(diffReport);\n  return newInstances;\n\n}\n\nexport default { loadModel, addVariableToModel };\n"],"file":"ModelManager.js"}