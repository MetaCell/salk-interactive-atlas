{"version":3,"sources":["../../src/capabilities/ADerivedStateVariableCapability.js"],"names":["capabilityId","watched","timeSeries","inputs","getTimeSeries","step","getVariable","getWrappedObj","normalizationFunction","getTimeSeriesFromInput","inputIndex","inputId","push","ModelFactory","findMatchingInstanceByID","window","Instances","getChildren","inputTimeSeries","undefined","sampleIndex","length","setTimeSeries","getInitialValue","initialValues","getUnit","extractUnit","unit","i","value","eClass","isWatched"],"mappings":"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","sourcesContent":["/**\n * Client class use to augment a model with state variable capabilities\n *\n * @module model/ADerivedStateVariableCapability\n * @author Adrian Quintana\n */\nimport ModelFactory from '../ModelFactory';\n\nexport default {\n  capabilityId: 'DerivedStateVariableCapability',\n  watched: false,\n  timeSeries: null,\n  inputs: null,\n\n  /**\n   * Get value of quantity\n   *\n   * @command Variable.getTimeSeries()\n   * @returns {String} Value of quantity\n   */\n  getTimeSeries: function (step) {\n    if (this.getVariable().getWrappedObj().normalizationFunction == 'SPACEPLOT'){\n      return this.getTimeSeriesFromInput(step);\n    }\n    if (this.getVariable().getWrappedObj().normalizationFunction == 'CONSTANT'){\n      return this.getVariable().getWrappedObj().timeSeries;\n    }\n  },\n\n  getTimeSeriesFromInput: function (step) {\n    var timeSeries = []\n    // FIXME: Remove this once we pass pointers instead of ids\n    if (!this.inputs){\n      this.inputs = []\n      for (var inputIndex in this.getVariable().getWrappedObj().inputs){\n        var inputId = this.getVariable().getWrappedObj().inputs[inputIndex]\n        this.inputs.push(ModelFactory.findMatchingInstanceByID(inputId, window.Instances[0].getChildren()))\n      }\n                \n    }\n            \n    for (var inputIndex in this.inputs){\n      var inputTimeSeries = this.inputs[inputIndex].getTimeSeries();\n      if (inputTimeSeries != undefined){\n        var sampleIndex = step\n        if (step == undefined){\n          sampleIndex = inputTimeSeries.length - 1\n        }\n        timeSeries.push(inputTimeSeries[sampleIndex]);\n      } else {\n        timeSeries.push([])\n      }\n    }\n    return timeSeries;\n  },\n\n\n  /**\n   * Set the time series for the state variable\n   *\n   * @command Variable.setTimeSeries()\n   * @returns {Object} The state variable\n   */\n  setTimeSeries: function (timeSeries) {\n    this.timeSeries = timeSeries;\n    return this;\n  },\n\n  /**\n   * Get the initial value for the state variable\n   *\n   * @command Variable.getInitialValue()\n   * @returns {Object} The initial value of the state variable\n   */\n  getInitialValue: function () {\n    return this.getVariable().getWrappedObj().initialValues;\n  },\n\n  /**\n   * Get the type of tree this is\n   *\n   * @command Variable.getUnit()\n   * @returns {String} Unit for quantity\n   */\n  getUnit: function () {\n    if (!this.timeSeries) {\n      return this.extractUnit();\n    } else {\n      if (this.timeSeries.unit == null || this.timeSeries.unit == undefined){\n        if (this.getVariable() != undefined || this.getVariable() != null){\n          return this.extractUnit();\n        }\n      } else {\n        return this.timeSeries.unit;\n      }\n    }\n  },\n        \n  extractUnit : function (){\n    var unit = undefined;\n    var initialValues = this.getVariable().getWrappedObj().initialValues;\n\n    for (var i = 0; i < initialValues.length; i++) {\n      if (initialValues[i].value.eClass === 'PhysicalQuantity' || initialValues[i].value.eClass === 'TimeSeries') {\n        unit = initialValues[i].value.unit.unit\n      }\n    }\n    return unit;\n  },\n\n  /**\n   * Get watched\n   *\n   * @command Variable.getWatched()\n   * @returns {boolean} true if this variable is being watched\n   */\n  isWatched: function () {\n    // NOTE: this.watched is a flag added by this API / Capability\n    return this.watched;\n  },\n}\n\n"],"file":"ADerivedStateVariableCapability.js"}