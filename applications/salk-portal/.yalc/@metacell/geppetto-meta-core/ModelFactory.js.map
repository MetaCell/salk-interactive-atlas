{"version":3,"sources":["../src/ModelFactory.js"],"names":["GeppettoModel","require","Library","Type","Variable","Value","Datasource","Query","CompositeType","CompositeVisualType","ArrayType","ImportType","ImportValue","Instance","ExternalInstance","ArrayInstance","ArrayElementInstance","VisualGroup","VisualGroupElement","Pointer","PointerElement","SimpleInstance","SimpleConnectionInstance","World","AVisualCapability","AVisualGroupCapability","AConnectionCapability","AParameterCapability","AParticlesCapability","AStateVariableCapability","ADerivedStateVariableCapability","ModelFactory","rawGeppetoModel","geppettoModel","instances","allPaths","allStaticVarsPaths","allPathsIndexing","newPathsIndexing","cleanModel","createGeppettoModel","jsonModel","storeModel","populateRefs","undefined","eClass","createModel","variables","console","warn","createVariables","worlds","fillWorldsFromRawModel","tags","map","wr","name","i","libraries","length","synched","library","createLibrary","parent","setTypes","createTypes","types","getLibraries","push","datasources","createDatasources","dataSources","queries","createQueries","populateChildrenShortcuts","populateTypeReferences","getCurrentWorld","populateInstanceReferences","staticInstancesPaths","_getStaticInstancePaths","concat","createWorld","world","w","createStaticInstances","filter","inst","instance","createStaticInstance","rawInstance","Resources","SIMPLE_INSTANCE_NODE","SIMPLE_CONNECTION_INSTANCE_NODE","value","createValue","wrappedObj","node","getChildren","children","grandChildren","j","getId","getMetaType","ARRAY_INSTANCE_NODE","getWorlds","getInstances","populateConnections","VARIABLE_NODE","getTypes","referencedTypes","hasPointerType","swapTypes","refStr","$ref","typeObj","resolve","POINTER_TYPE","initialValues","getInitialValues","val","pointer","createPointer","pointerValue","resolvedTypes","PARAMETER_TYPE","extendApi","CONNECTION_TYPE","resolveConnectionValues","vizType","getVisualType","visualType","superType","getSuperType","typeObjs","Array","a","arrayType","getType","type","jsonPointer","rawElements","elements","pointerElements","element","createPointerElement","jsonPointerElement","variable","index","pointerElement","jsonDataSources","ds","createDatasource","jsonVariables","createVariable","anonymousTypes","jsonTypes","createCompositeType","createCompositeVisualType","createImportType","_index","createArrayType","createType","VISUAL_TYPE_NODE","instantiateVariables","varsWithVizTypes","allPotentialInstancePaths","allPotentialInstancePathsForIndexing","vars","getAllVariables","fetchVarsWithVisualTypes","fetchAllPotentialInstancePaths","varsToInstantiate","buildInstanceHierarchy","k","createInstancesFromDiffReport","diffReport","instanceCount","getInstanceCount","window","Instances","newInstancePaths","that","getPotentialInstancePaths","paths","l","hasCapability","VISUAL_CAPABILITY","getAllPotentialInstancesOfType","getPath","getVariables","eval","varTypes","diffTypes","newInstances","getInstance","error","ref","addConnection","b","mergeModel","rawModel","overrideTypes","diffModel","diffLibs","libs","getWrappedObj","libMatch","existingTypes","addedTypes","typeMatched","importTypeMatched","typeMatch","m","addType","getParent","variablesToUpdate","getVariableReferences","x","swapTypeInVariable","overrideType","addPotentialInstancePathsForTypeSwap","updateCapabilities","diffVars","_mergeVariables","currentWorld","_mergeInstances","currentModelVars","diffReportVars","match","find","currModelVar","addPotentialInstancePaths","diffInst","currentModelInst","diffReportInst","matchIdx","findIndex","newInstancePath","createInstancePathObj","mergeValue","varMatch","y","updateInstancesCapabilities","propagateCapabilityToParents","getVisualGroups","setVisualGroups","CONNECTION_CAPABILITY","STATE_VARIABLE_TYPE","STATE_VARIABLE_CAPABILITY","DERIVED_STATE_VARIABLE_TYPE","DERIVED_STATE_VARIABLE_CAPABILITY","PARAMETER_CAPABILITY","varInstances","getAllInstancesOf","potentialInstancePaths","potentialInstancePathsForIndexing","typePath","partialPathsForNewType","partialPathsForNewTypeIndexing","fetchAllPotentialInstancePathsForType","potentialInstancesForNewtype","potentialInstancesForNewtypeIndexing","replace","path","entry","metaType","list","is","indexOf","splice","typeToSwapOut","typeToSwapIn","anonTypes","swapTypeInTypes","COMPOSITE_TYPE_NODE","nestedVars","addInstances","newInstancesPaths","topInstances","instanceCreatedCallback","idConcatPath","splitInstancePath","split","arrayId","arrayElementId","forEach","newInstance","includes","instanceStrings","parentInstance","model","topLevelInstances","newlyCreatedInstance","newlyCreatedInstances","varsIds","GEPPETTO_MODEL_NODE","allTypes","ARRAY_TYPE_NODE","instancePath","getInstancePath","matchingInstance","findMatchingInstance","size","getSize","arrayOptions","id","getName","_metaType","arrayInstance","createArrayInstance","options","ARRAY_ELEMENT_INSTANCE_NODE","explodedInstance","createArrayElementInstance","addChild","isStatic","INSTANCE_NODE","createInstance","PARTICLES_TYPE","newPath","connectionInstanceOrVariable","getVariable","connectionValue","pointerA","pointerB","augmentPointer","setA","setB","connectionInstance","rootInstance","findRoot","pointedVariable","getElements","pointedIndex","getIndex","findMatchingInstanceByID","originalElement","buildPointerElementsChain","getRawInstancePath","instanceIds","pointerEl","matching","recurseMatching","capability","capabilityId","recurseMatch","findMatchingInstancesByType","findMatchingInstancesByVariable","parentPath","TYPE_NODE","COMPOSITE_VISUAL_TYPE_NODE","includePotentialInstance","TEXT_TYPE","nested","getNestingLevel","printInstanceStats","stats","Object","prototype","hasOwnProperty","call","log","allPotentialPaths","allPotentialPathsForIndexing","xpath","nodeRef","isStaticVar","staticVarAlreadyAdded","potentialParentPaths","arrayPath","arrayMetaType","starPath","starEntry","n","arrayElementPath","arrayElementEntry","g","h","v","values","createValues","initialValuesObject","valueNode","d","rawQueries","q","createQuery","matchingCriteriaRefs","matchingCriteria","typeRefs","typesCriteria","getTypeOptions","t","tag","it","visualGroups","createVisualGroups","updateConnectionInstances","typesToSearch","getAllTypesOfMetaType","connectionVariables","getAllVariablesOfMetaType","connectionInstances","present","connections","getAllPotentialInstancesEndingWith","createExternalInstance","projectId","aei","nodes","visualGroupElements","tagRefObjs","vg","createVisualGroupElements","vge","cleanupInstanceTreeState","stateVariableInstances","STATE_VARIABLE_TYPE_PATH","setTimeSeries","setWatched","parameterInstances","PARAMETER_TYPE_PATH","setValue","getAllInstancesWithCapability","matchingInstances","typeOrVar","String","allInstances","getAllInstancesOfType","getAllInstancesOfVariable","endingString","matchingPotentialInstances","endsWith","getAllPotentialInstancesStartingWith","startingString","startsWith","getAllPotentialInstancesOfMetaType","includeType","itemToPush","libraryTypes","getAllTypesOfType","superTypes","getAllVariablesOfType","typeToMatch","recursive","nestedVariables","constructor","getTopLevelVariablesById","variableIds","Model","getMatchingQueries","resultType","topLevelQueries","getQueries","matchingQueries","matchesCriteria","getResultType","getHTMLVariable","identifier","count","deleteInstance","deleteCallback","removeMatchingInstanceFromArray","instanceArray","unresolveType","typeToLibraryMap","allTypesInModel","reference","raw","parseInt","getAnonymousTypes","getVisualGroupElements","rawGeppettoModel"],"mappings":"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","sourcesContent":["\n\n/**\n * Factory class with model creation methods.\n *\n * @author Giovanni Idili\n * @author Matteo Cantarelli\n */\n\nconst GeppettoModel = require('./model/GeppettoModel').default;\nconst Library = require('./model/Library').default;\nconst Type = require('./model/Type').default;\nconst Variable = require('./model/Variable').default;\nconst Value = require('./model/Value').default;\nconst Datasource = require('./model/Datasource').default;\nconst Query = require('./model/Query').default;\nconst CompositeType = require('./model/CompositeType').default;\nconst CompositeVisualType = require('./model/CompositeVisualType').default;\nconst ArrayType = require('./model/ArrayType').default;\nconst ImportType = require('./model/ImportType').default;\nconst ImportValue = require('./model/ImportValue').default;\nconst Instance = require('./model/Instance').default;\nconst ExternalInstance = require('./model/ExternalInstance').default;\nconst ArrayInstance = require('./model/ArrayInstance').default;\nconst ArrayElementInstance = require('./model/ArrayElementInstance').default;\nconst VisualGroup = require('./model/VisualGroup').default;\nconst VisualGroupElement = require('./model/VisualGroupElement').default;\nconst Pointer = require('./model/Pointer').default;\nconst PointerElement = require('./model/PointerElement').default;\nconst SimpleInstance = require('./model/SimpleInstance').default;\nconst SimpleConnectionInstance = require('./model/SimpleConnectionInstance').default;\nconst World = require('./model/World').default;\nconst AVisualCapability = require('./capabilities/AVisualCapability').default;\nconst AVisualGroupCapability = require('./capabilities/AVisualGroupCapability').default;\nconst AConnectionCapability = require('./capabilities/AConnectionCapability').default;\nconst AParameterCapability = require('./capabilities/AParameterCapability').default;\nconst AParticlesCapability = require('./capabilities/AParticlesCapability').default;\nconst AStateVariableCapability = require('./capabilities/AStateVariableCapability').default;\nconst ADerivedStateVariableCapability = require('./capabilities/ADerivedStateVariableCapability').default;\n\n\nimport Resources from './Resources';\n/**\n * @class ModelFactory\n */\nexport const ModelFactory = {\n  /*\n   * Variables to keep track of tree building state go here if needed\n   */\n  rawGeppetoModel: null,\n  geppettoModel: null,\n  instances: null,\n  allPaths: [],\n  allStaticVarsPaths: {},\n  allPathsIndexing: [],\n  newPathsIndexing: [],\n\n\n  /**\n   * Creates and populates Geppetto model\n   */\n  cleanModel: function () {\n    this.allPaths = [];\n    this.allStaticVarsPaths = {};\n    this.allPathsIndexing = [];\n  },\n\n  /**\n   * Creates and populates Geppetto model\n   *\n   * @param jsonModel\n   * @param storeRaw - store the raw and object models in the model factory\n   * @param populateRefs - populate type references after model creation\n   *\n   * @returns {GeppettoModel}\n   */\n  createGeppettoModel: function (jsonModel, storeModel, populateRefs) {\n    // set defaults for optional flags\n    if (storeModel == undefined) {\n      // default behaviour store model\n      storeModel = true;\n    }\n    if (populateRefs == undefined) {\n      // default behaviour populate type references\n      populateRefs = true;\n    }\n\n    var geppettoModel = null;\n\n    if (jsonModel.eClass == 'GeppettoModel') {\n      if (storeModel) {\n        // store raw model for easy access during model building operations\n        this.rawGeppetoModel = jsonModel;\n      }\n\n      geppettoModel = this.createModel(jsonModel);\n\n      if (storeModel) {\n        // store raw model for easy access during model building operations\n        this.rawGeppetoModel = jsonModel;\n        // store object model\n        this.geppettoModel = geppettoModel;\n      }\n\n      // create variables\n      if (jsonModel.variables) {\n        console.warn('Geppetto variables are deprecated: use worlds instead.');\n        geppettoModel.variables = this.createVariables(jsonModel.variables, geppettoModel);\n      }\n      if (jsonModel.worlds) {\n        this.fillWorldsFromRawModel(geppettoModel, jsonModel);\n      }\n\n      if (jsonModel.tags) {\n        this.geppettoModel.tags = jsonModel.tags.map(wr => wr.name);\n      }\n\n\n      // create libraries\n      for (var i = 0; i < jsonModel.libraries.length; i++) {\n        if (!jsonModel.libraries[i].synched) {\n          var library = this.createLibrary(jsonModel.libraries[i]);\n          library.parent = geppettoModel;\n          library.setTypes(this.createTypes(jsonModel.libraries[i].types, library));\n          geppettoModel.getLibraries().push(library);\n        }\n      }\n\n      // create datasources\n      geppettoModel.datasources = this.createDatasources(jsonModel.dataSources, geppettoModel);\n\n      // create top level queries (potentially cross-datasource)\n      geppettoModel.queries = this.createQueries(jsonModel.queries, geppettoModel);\n\n      if (populateRefs) {\n        // traverse everything and build shortcuts to children if composite --> containment == true\n        this.populateChildrenShortcuts(geppettoModel);\n\n        // traverse everything and populate type references in variables\n        this.populateTypeReferences(geppettoModel);\n\n        if (geppettoModel.getCurrentWorld()) {\n          this.populateInstanceReferences(geppettoModel);\n          // Add instances from the default world to allPaths\n          let staticInstancesPaths = this._getStaticInstancePaths(geppettoModel);\n          this.allPaths = this.allPaths.concat(staticInstancesPaths);\n          this.allPathsIndexing = this.allPathsIndexing.concat(staticInstancesPaths);\n        }\n      }\n        \n    }\n          \n    return geppettoModel;\n  },\n\n  createWorld: function (world) {\n    const w = new World(world, this.createStaticInstances(world.instances));\n    w.parent = this.geppettoModel;\n    w.variables = this.createVariables(world.variables, w);\n    return w;\n  },\n\n  createStaticInstances: function (instances) {\n    return instances ? instances.filter(inst => !inst.synched).map(instance => this.createStaticInstance(instance)) : [];\n  },\n\n\n  createStaticInstance: function (rawInstance) {\n    let instance;\n    switch (rawInstance.eClass) {\n    case Resources.SIMPLE_INSTANCE_NODE:\n      instance = new SimpleInstance(rawInstance);\n      break;\n    case Resources.SIMPLE_CONNECTION_INSTANCE_NODE:\n      instance = new SimpleConnectionInstance(rawInstance);\n      break;\n    default:\n      throw instance.eClass + \" instance type is not supported\"\n    }\n    if (instance.value) {\n      instance.value = this.createValue(rawInstance, { wrappedObj: rawInstance.value });\n    }\n          \n    return instance;\n  },\n\n  /**\n   * Populate shortcuts of children onto parents\n   */\n  populateChildrenShortcuts: function (node) {\n    // check if getChildren exists, if so add shortcuts based on ids and recurse on each\n    if (typeof node.getChildren === \"function\") {\n      var children = node.getChildren();\n\n      if (children != undefined) {\n        for (var i = 0; i < children.length; i++) {\n          // do not populate shortcuts for array instances - children are accessed as array elements\n          if (node instanceof Variable && children[i] instanceof Type){\n            // it's an anonymous type we don't want it to be in the path\n            this.populateChildrenShortcuts(children[i]);\n                            \n            var grandChildren = children[i].getChildren();\n            for (var j = 0; j < grandChildren.length; j++) {\n              node[grandChildren[j].getId()] = grandChildren[j];\n            }\n                            \n            continue;\n          }\n          if (node.getMetaType() != Resources.ARRAY_INSTANCE_NODE) {\n            node[children[i].getId()] = children[i];\n          }\n\n          this.populateChildrenShortcuts(children[i]);\n        }\n      }\n    }\n  },\n\n  populateInstanceReferences: function (geppettoModel) {\n    if (!geppettoModel.getWorlds().length) { \n      return; \n    }\n\n    for (let world of geppettoModel.getWorlds()) {\n      for (let instance of world.getInstances()) {\n        if (instance instanceof SimpleConnectionInstance) {\n          this.populateConnections(instance);\n        }\n      }\n    }\n  },\n\n  /**\n   * Populate type references\n   */\n  populateTypeReferences: function (node) {\n\n    // check if variable, if so populate type references\n    if (node.getMetaType() == Resources.VARIABLE_NODE) {\n      var types = node.getTypes();\n      var referencedTypes = [];\n      var hasPointerType = false;\n      var swapTypes = true;\n\n      if (types != undefined) {\n        for (var i = 0; i < types.length; i++) {\n          // check if references are already populated\n          if (types[i] instanceof Type) {\n            swapTypes = false;\n            break;\n          }\n\n          // get reference string - looks like this --> '//@libraries.1/@types.5';\n          var refStr = types[i].$ref;\n\n          // if it's anonymous there's no reference\n          if (refStr != undefined) {\n            // go grab correct type from Geppetto Model\n            var typeObj = this.resolve(refStr);\n\n            // track if we have pointer type\n            if (typeObj.getMetaType() == Resources.POINTER_TYPE) {\n              hasPointerType = true;\n            }\n\n            // add to list\n            referencedTypes.push(typeObj);\n          }\n        }\n\n        if (swapTypes) {\n          // set types to actual object references using backbone setter\n          node.setTypes(referencedTypes);\n        }\n      }\n\n      // check if pointer type\n      if (hasPointerType) {\n        var initialValues = node.getInitialValues();\n\n        if (initialValues != undefined && initialValues.length == 1) {\n          // go to initial values and parse pointer into Pointer with its PointerElements\n          var val = initialValues[0];\n          var pointer = this.createPointer(val.value);\n          // populate pointerValue on variable\n          node.pointerValue = pointer;\n        } else {\n          throw ( \"The variable \" + node.getId() + \" does not have initial values. Initial values expected.\" );\n        }\n      }\n\n      // add capabilities to variables\n      var resolvedTypes = node.getTypes();\n      for (var j = 0; j < resolvedTypes.length; j++) {\n        if (resolvedTypes[j].getMetaType() == Resources.PARAMETER_TYPE) {\n          // if a variable has a Parameter type, add AParameterCapability to the variable\n          node.extendApi(AParameterCapability);\n        } else if (resolvedTypes[j].getMetaType() == Resources.CONNECTION_TYPE) {\n          // if a variable has a connection type, add connection capability\n          node.extendApi(AConnectionCapability);\n          this.resolveConnectionValues(node);\n        }\n      }\n    } else if (!(node instanceof ArrayType) && (node instanceof Type || node instanceof CompositeType)) {\n      // take visual type string - looks like this --> '//@libraries.1/@types.5'\n      var vizType = node.getVisualType();\n\n      if (vizType != undefined) {\n        // replace with reference to actual type\n        var typeObj = this.resolve(vizType.$ref);\n        node.visualType = typeObj;\n      }\n\n      // resolve super type\n      var superType = node.getSuperType();\n      if (superType != undefined) {\n        var typeObjs = [];\n\n        // convert to array if single element\n        if (!(superType instanceof Array)) {\n          superType = [superType];\n        }\n\n        for (var a = 0; a < superType.length; a++) {\n          if (superType[a].$ref) {\n            // replace with reference to actual type\n            typeObjs.push(this.resolve(superType[a].$ref));\n          } else {\n            // replace with reference to actual type\n            typeObjs.push(superType[a]);\n          }\n        }\n\n        node.superType = typeObjs;\n      }\n    } else if (node instanceof ArrayType) {\n      // take array type string - looks like this --> '//@libraries.1/@types.5'\n      var arrayType = node.getType();\n\n      if (arrayType != undefined) {\n        var typeObj = this.resolve(arrayType.$ref);\n        node.type = typeObj;\n      }\n\n      // resolve super type\n      var superType = node.getSuperType();\n      if (superType != undefined) {\n        var typeObjs = [];\n\n        // convert to array if single element\n        if (!(superType instanceof Array)) {\n          superType = [superType];\n        }\n\n        for (var a = 0; a < superType.length; a++) {\n          if (superType[a].$ref) {\n            // replace with reference to actual type\n            typeObjs.push(this.resolve(superType[a].$ref));\n          } else {\n            // replace with reference to actual type\n            typeObjs.push(superType[a]);\n          }\n        }\n\n        node.superType = typeObjs;\n      }\n    } else if (node.getMetaType() === Resources.SIMPLE_INSTANCE_NODE || node.getMetaType() === Resources.SIMPLE_CONNECTION_INSTANCE_NODE) {\n      node.type = this.resolve(node.getType().$ref);\n    }\n\n    // check if getChildren exists, if so recurse over children\n    if (typeof node.getChildren === \"function\") {\n      var children = node.getChildren();\n\n      if (children != undefined) {\n        for (var i = 0; i < children.length; i++) {\n          this.populateTypeReferences(children[i]);\n        }\n      }\n    }\n  },\n\n  /**\n   * Creates pointer given a pointer in raw json format\n   */\n  createPointer: function (jsonPointer) {\n\n    // get raw pointer elements\n    var rawElements = jsonPointer.elements;\n    var pointerElements = [];\n\n    // loop elements and create PointerElements (resolving variables / types)\n    for (var i = 0; i < rawElements.length; i++) {\n      var element = this.createPointerElement(rawElements[i]);\n      pointerElements.push(element);\n    }\n\n    // create pointer object setting elements\n    var pointer = new Pointer({ \"wrappedObj\": jsonPointer, \"elements\": pointerElements });\n\n    return pointer;\n  },\n\n  /**\n   * Creates pointer given a pointer in raw json format\n   */\n  createPointerElement: function (jsonPointerElement) {\n    var variable = this.resolve(jsonPointerElement.variable.$ref);\n    var type = this.resolve(jsonPointerElement.type.$ref);\n    var index = jsonPointerElement.index;\n\n    // create pointer object setting elements\n    var pointerElement = new PointerElement({\n      \"wrappedObj\": jsonPointerElement,\n      \"variable\": variable,\n      \"type\": type,\n      \"index\": index\n    });\n\n    return pointerElement;\n  },\n\n  /**\n   * Creates datasources starting from an array of datasources in the json model format\n   */\n  createDatasources: function (jsonDataSources, parent) {\n    var dataSources = [];\n\n    if (jsonDataSources != undefined) {\n      for (var i = 0; i < jsonDataSources.length; i++) {\n        var ds = this.createDatasource(jsonDataSources[i]);\n        ds.parent = parent;\n\n        dataSources.push(ds);\n      }\n    }\n\n    return dataSources;\n  },\n\n  /**\n   * Creates variables starting from an array of variables in the json model format\n   */\n  createVariables: function (jsonVariables, parent) {\n    var variables = [];\n\n    if (jsonVariables != undefined) {\n      for (var i = 0; i < jsonVariables.length; i++) {\n        if (!jsonVariables[i].synched) {\n          var variable = this.createVariable(jsonVariables[i]);\n          variable.parent = parent;\n\n          // check if it has an anonymous type\n          if (jsonVariables[i].anonymousTypes != undefined) {\n            variable.anonymousTypes = this.createTypes(jsonVariables[i].anonymousTypes, variable);\n          }\n\n          variables.push(variable);\n        }\n      }\n    }\n\n    return variables;\n  },\n\n  /**\n   * Creates type objects starting from an array of types in the json model format\n   */\n  createTypes: function (jsonTypes, parent) {\n    var types = [];\n\n    if (jsonTypes != undefined) {\n      for (var i = 0; i < jsonTypes.length; i++) {\n        if (!jsonTypes[i].synched) {\n          var type = null;\n\n          // check if it's composite type, visual type, array type or simple type\n          if (jsonTypes[i].eClass == 'CompositeType' || jsonTypes[i].eClass == 'ConnectionType') {\n            type = this.createCompositeType(jsonTypes[i]);\n          } else if (jsonTypes[i].eClass == 'CompositeVisualType') {\n            type = this.createCompositeVisualType(jsonTypes[i]);\n            // inject visual capability to all CompositeVisualType\n            type.extendApi(AVisualCapability);\n          } else if (jsonTypes[i].eClass == 'ImportType') {\n            type = this.createImportType(jsonTypes[i], null);\n            // we store the index of the importType to speed up swapping procedures\n            type._index = i;\n          } else if (jsonTypes[i].eClass == 'ArrayType') {\n            type = this.createArrayType(jsonTypes[i]);\n          } else {\n            type = this.createType(jsonTypes[i]);\n            // inject visual capability if MetaType == VisualType\n            if (type.getMetaType() == Resources.VISUAL_TYPE_NODE) {\n              type.extendApi(AVisualCapability);\n            }\n          }\n\n          // if getVisualType != null also inject visual capability\n          if (type.getVisualType() != undefined) {\n            type.extendApi(AVisualCapability);\n          }\n\n          // set parent\n          type.parent = parent;\n\n          types.push(type);\n        }\n      }\n    }\n\n    return types;\n  },\n\n  /**\n   * Creates and populates initial instance tree skeleton with any instance that needs to be visualized\n   */\n  instantiateVariables: function (geppettoModel) {\n\n    var instances = [];\n\n    // we need to explode instances for variables with visual types\n    var varsWithVizTypes = [];\n\n    // we need to fetch all potential instance paths (even for not exploded instances)\n    var allPotentialInstancePaths = [];\n    var allPotentialInstancePathsForIndexing = [];\n\n    // builds list of vars with visual types and connection types - start traversing from top level variables\n    var vars = geppettoModel.getAllVariables();\n    for (var i = 0; i < vars.length; i++) {\n      this.fetchVarsWithVisualTypes(vars[i], varsWithVizTypes, '');\n      this.fetchAllPotentialInstancePaths(vars[i], allPotentialInstancePaths, allPotentialInstancePathsForIndexing, '');\n    }\n\n    this.allPaths = this.allPaths.concat(allPotentialInstancePaths);\n    this.allPathsIndexing = allPotentialInstancePathsForIndexing;\n    var varsToInstantiate = varsWithVizTypes;\n\n    // based on list, traverse again and build instance objects\n    for (var j = 0; j < varsToInstantiate.length; j++) {\n      this.buildInstanceHierarchy(varsToInstantiate[j], null, geppettoModel, instances);\n    }\n\n    // set instances to internal cache of the factory\n    this.instances = instances;\n\n    // populate shortcuts / populate connection references\n    for (var k = 0; k < instances.length; k++) {\n      this.populateChildrenShortcuts(instances[k]);\n      this.populateConnections(instances[k]);\n    }\n\n    return instances;\n  },\n\n  /**\n   * Checks if new instances need to be created\n   *\n   * @param diffReport - lists variables and types that we need to check instances for\n   */\n  createInstancesFromDiffReport: function (diffReport) {\n    // get initial instance count (used to figure out if we added instances at the end)\n    var instanceCount = this.getInstanceCount(window.Instances);\n\n    var newInstancePaths = [];\n\n    /*\n     * shortcut function to get potential instance paths given a set types\n     * NOTE: defined as a nested function to avoid polluting the visible API of ModelFactory\n     */\n    var that = this;\n    var getPotentialInstancePaths = function (types) {\n      var paths = [];\n\n      for (var l = 0; l < types.length; l++) {\n        if (types[l].hasCapability(Resources.VISUAL_CAPABILITY)) {\n          // get potential instances with that type\n          paths = paths.concat(that.getAllPotentialInstancesOfType(types[l].getPath()));\n        }\n      }\n      return paths;\n    };\n\n    // STEP 1: check new variables to see if any new instances are needed\n    var varsWithVizTypes = [];\n    const variables = this.getVariables(diffReport);\n    for (var i = 0; i < variables; i++) {\n      ModelFactory.fetchVarsWithVisualTypes(variables, varsWithVizTypes, '');\n    }\n    // for each variable, get types and potential instances of those types\n    for (var j = 0; j < varsWithVizTypes.length; j++) {\n      // var must exist since we just fetched it from the geppettoModel\n      var variable = eval(varsWithVizTypes[j]);\n      var varTypes = variable.getTypes();\n      newInstancePaths = newInstancePaths.concat(getPotentialInstancePaths(varTypes));\n    }\n\n    // STEP 2: check types and create new instances if need be\n    var diffTypes = diffReport.types;\n    newInstancePaths = newInstancePaths.concat(getPotentialInstancePaths(diffTypes));\n\n\n    // STEP 3: call getInstance to create the instances\n    var newInstances = window.Instances.getInstance(newInstancePaths);\n\n    // STEP 4: If instances were added, re-populate shortcuts\n    for (var k = 0; k < newInstances.length; k++) {\n      ModelFactory.populateChildrenShortcuts(newInstances[k]);\n    }\n\n\n    for (var k = 0; k < window.Instances.length; k++) {\n      ModelFactory.populateConnections(window.Instances[k]);\n    }\n\n    return newInstances;\n  },\n\n  /**\n   * Populate connections\n   */\n  populateConnections: function (instance) {\n    // check if it's a connection\n    if (instance.getMetaType() === Resources.SIMPLE_CONNECTION_INSTANCE_NODE){\n          \n      if (!instance.a) {\n        console.error(`Error while adding connection ${instance.getId()}: cannot find first connection`, instance)\n      }\n      if (instance.a?.$ref !== undefined) {\n        const ref = instance.a.$ref;\n        instance.a = this.resolve(ref);\n        if (instance.a) {\n          instance.a.addConnection(instance);\n        } else {\n          console.error(`Error resolving reference ${ref}  while adding connection ${instance.getId()} `)\n        }\n      } \n          \n      if (!instance.b) {\n        console.error(`Error while adding connection ${instance.getId()}: cannot find second connection`, instance)\n      }\n          \n      if (instance.b?.$ref !== undefined) {\n        const ref = instance.b.$ref;\n        instance.b = this.resolve(ref);\n        if (instance.b) {\n          instance.b.addConnection(instance);\n        } else {\n          console.error(`Error resolving reference ${ref}  while adding connection ${instance.getId()} `)\n        }\n      } \n          \n      return;\n    }\n\n    {if (instance.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n      // do the bit of bidness\n      this.resolveConnectionValues(instance);\n    }}\n\n    // check if getChildren exists, if so add shortcuts based on ids and recurse on each\n    if (typeof instance.getChildren === \"function\") {\n      var children = instance.getChildren();\n      if (children != undefined) {\n        for (var i = 0; i < children.length; i++) {\n          // recurse like no tomorrow\n          this.populateConnections(children[i]);\n        }\n      }\n    }\n  },\n\n  /**\n   * Merge Geppetto model parameter into existing Geppetto model\n   *\n   * @param rawModel - raw model to be merged, by deault only adds new vars / libs / types\n   * @param overrideTypes - bool, mergeModel overrides type\n   */\n  mergeModel: function (rawModel, overrideTypes) {\n    if (overrideTypes == undefined) {\n      overrideTypes = false;\n    }\n\n    this.newPathsIndexing = [];\n\n    // diff object to report back what changed / has been added\n    var diffReport = { variables: [], types: [], libraries: [], worlds: [] };\n\n    // STEP 1: create new geppetto model to merge into existing one\n    var diffModel = this.createGeppettoModel(rawModel, false, false);\n\n    // STEP 2: add libraries/types if any are different (both to object model and json model)\n    var diffLibs = diffModel.getLibraries();\n    var libs = this.geppettoModel.getLibraries();\n\n    for (var i = 0; i < diffLibs.length; i++) {\n      if (diffLibs[i].getWrappedObj().synched == true) {\n        // if synch placeholder lib, skip it\n        continue;\n      }\n\n      var libMatch = false;\n\n      for (var j = 0; j < libs.length; j++) {\n        // if the library exists, go in and check for types diff\n        if (diffLibs[i].getPath() == libs[j].getPath()) {\n          libMatch = true;\n\n          var diffTypes = diffLibs[i].getTypes();\n          var existingTypes = libs[j].getTypes();\n\n          // first loop on types - add new ones\n          var addedTypes = [];\n\n          /*\n           * the types that need to be swapped in in the first array, the ImportTypes that need to be swapped out in the second one\n           * these two arrays are synched by their index\n           */\n          var typeMatched = [];\n          var importTypeMatched = [];\n\n          for (var k = 0; k < diffTypes.length; k++) {\n            if (diffTypes[k].getWrappedObj().synched == true) {\n              // if synch placeholder type, skip it\n              continue;\n            }\n\n            var typeMatch = false;\n\n            for (var m = 0; m < existingTypes.length; m++) {\n              // check if the given diff type already exists\n              if (diffTypes[k].getPath() == existingTypes[m].getPath()) {\n                typeMatch = true;\n                typeMatched.push(diffTypes[k]);\n                importTypeMatched.push(existingTypes[m]);\n                break;\n              }\n            }\n\n            // if the type doesn't exist, append it to the library\n            if (!typeMatch) {\n              // add to list of types on raw library object\n              if (libs[j].getWrappedObj().types == undefined) {\n                libs[j].getWrappedObj().types = [];\n              }\n\n              libs[j].getWrappedObj().types.push(diffTypes[k].getWrappedObj());\n\n              // add to library in geppetto object model\n              libs[j].addType(diffTypes[k]);\n\n              addedTypes.push(diffTypes[k]);\n\n\n              /*\n               * TODO: add potential instance paths\n               * NOTE: maybe not needed? the path will be added if a variable uses the type\n               */\n\n              // add to diff report\n              diffReport.types.push(diffTypes[k]);\n\n              // populate the shortcuts for the added type\n              this.populateChildrenShortcuts(diffTypes[k]);\n              // let's populate the shortcut in the parent of the type, this might not exist if it was a fetch\n              diffTypes[k].getParent()[diffTypes[k].getId()] = diffTypes[k];\n            }\n\n          }\n\n          for (var k = 0; k < addedTypes.length; k++) {\n            // populate references for the new type\n            this.populateTypeReferences(addedTypes[k]);\n          }\n\n          // second loop on types - override (if flag is set)\n          if (overrideTypes) {\n            for (var k = 0; k < typeMatched.length; k++) {\n\n              // populate references for the swapped type\n              this.populateTypeReferences(typeMatched[k]);\n              var index = importTypeMatched[k]._index;\n\n              var variablesToUpdate = importTypeMatched[k].getVariableReferences();\n              // swap type reference in ALL variables that point to it\n              for (var x = 0; x < variablesToUpdate.length; x++) {\n                this.swapTypeInVariable(variablesToUpdate[x], importTypeMatched[k], typeMatched[k]);\n              }\n\n              // swap type in raw model\n              libs[j].getWrappedObj().types[index] = typeMatched[k].getWrappedObj();\n\n              // store overridden type (so that unresolve type can swap it back)\n              typeMatched[k].overrideType = importTypeMatched[k];\n\n              // swap in object model\n              typeMatched[k].parent = libs[j];\n              libs[j].getTypes()[index] = typeMatched[k];\n              // libs[j].removeImportType(importTypeMatched[k]);\n\n              // add potential instance paths\n              this.addPotentialInstancePathsForTypeSwap(typeMatched[k]);\n\n              // update capabilities for variables and instances if any\n              this.updateCapabilities(variablesToUpdate);\n\n              // add to diff report\n              diffReport.types.push(typeMatched[k]);\n\n              // populate the shortcuts for the swapped type\n              this.populateChildrenShortcuts(typeMatched[k]);\n              // let's populate the shortcut in the parent of the type, this might not exist if it was a fetch\n              typeMatched[k].getParent()[typeMatched[k].getId()] = typeMatched[k];\n\n            }\n          }\n        }\n      }\n\n      // if the library doesn't exist yet, append it to the model with everything that's in it\n      if (!libMatch) {\n        if (this.geppettoModel.getWrappedObj().libraries == undefined) {\n          this.geppettoModel.getWrappedObj().libraries = [];\n        }\n\n        // add to raw model\n        this.geppettoModel.getWrappedObj().libraries.push(diffLibs[i].getWrappedObj());\n\n        // add to geppetto object model\n        diffLibs[i].parent = this.geppettoModel;\n        this.geppettoModel.getLibraries().push(diffLibs[i]);\n\n        // add to diff report\n        diffReport.libraries.push(diffLibs[i]);\n\n        // populate the shortcuts for the added library\n        this.populateChildrenShortcuts(diffLibs[i]);\n        // let's populate the shortcut in the parent of the library, this might not exist if it was a fetch\n        diffLibs[i].getParent()[diffLibs[i].getId()] = diffLibs[i];\n      }\n    }\n\n    // STEP 3: add variables if any new ones are found (both to object model and json model)\n        \n    // STEP 3a: merge old geppettoModel.variables\n    let diffVars = diffModel.variables;\n    diffReport.variables = this._mergeVariables(diffVars, this.geppettoModel);\n\n    const currentWorld = this.geppettoModel.getCurrentWorld();\n    // STEP 3b: merge world.variables and instances\n    if (currentWorld) {\n      diffVars = diffModel.getCurrentWorld().getVariables();\n      diffReport.worlds = rawModel.worlds.map(world => ({ ...world, variables: [], instances: [] }))\n          \n      // TODO handle multiple worlds\n      diffReport.worlds[0].variables = diffReport.worlds[0].variables.concat(\n        this._mergeVariables(diffVars, currentWorld)\n      );\n\n      // TODO handle multiple worlds\n      diffReport.worlds[0].instances = this._mergeInstances(\n        diffModel.getCurrentWorld().getInstances(), \n        currentWorld);\n      this.populateInstanceReferences(diffModel);\n    }\n        \n    return diffReport;\n  },\n\n  _mergeVariables: function (diffVars, parent) {\n    const currentModelVars = parent.getVariables(true);\n    const wrappedObj = parent.wrappedObj;\n    const diffReportVars = [];\n\n    for (var x = 0; x < diffVars.length; x++) {\n      if (diffVars[x].getWrappedObj().synched == true) {\n        // if synch placeholder var, skip it\n        continue;\n      }\n\n      var match = currentModelVars.find(currModelVar => diffVars[x].getPath() == currModelVar.getPath());\n\n      // if no match, add it, it's actually new\n      if (!match) {\n            \n        if (wrappedObj.variables == undefined) {\n          wrappedObj.variables = [];\n        }\n\n        // append variable to raw model\n        wrappedObj.variables.push(diffVars[x].getWrappedObj());\n\n        // add variable to geppetto object model\n        diffVars[x].parent = parent;\n        currentModelVars.push(diffVars[x]);\n\n        // populate references for new vars\n        this.populateTypeReferences(diffVars[x]);\n\n        // find new potential instance paths and add to the list\n        this.addPotentialInstancePaths([diffVars[x]]);\n\n        diffReportVars.push(diffVars[x]);\n\n        // populate the shortcuts for the added variable\n        this.populateChildrenShortcuts(diffVars[x]);\n        // let's populate the shortcut in the parent of the variable, this might not exist if it was a fetch\n        diffVars[x].getParent()[diffVars[x].getId()] = diffVars[x];\n      }\n    }\n    return diffReportVars;\n  },\n\n  /**\n   * Merge simple instances \n   * @param {*} diffInst wrapped instance objects to be added\n   * @param {*} diffReportInst diff report list to be filled\n   * @param {World} parent - parent container: the world in which the instances are defined\n   */\n  _mergeInstances: function (diffInst, parent) {\n    const currentModelInst = parent.getInstances();\n    const wrappedObj = parent.wrappedObj;\n    const diffReportInst = [];\n\n    if (wrappedObj.instances == undefined) {\n      wrappedObj.instances = [];\n    }\n\n    for (var x = 0; x < diffInst.length; x++) {\n      if (diffInst[x].getWrappedObj().synched == true) {\n        // if synch placeholder var, skip it\n        continue;\n      }\n\n      diffInst[x].parent = this.geppettoModel;\n          \n      this.populateTypeReferences(diffInst[x]);\n          \n      const match = currentModelInst[diffInst[x].getId()];\n      if (match) {\n        const matchIdx = currentModelInst.findIndex(currModelVar => diffInst[x].getPath() == currModelVar.getPath());\n        currentModelInst[matchIdx] = diffInst[x];\n        currentModelInst[match.getId()] = diffInst[x];\n        Instances[match.getId()] = diffInst[x];\n      } else {\n        // if no match, add it, it's actually new\n        diffReportInst.push(diffInst[x]);\n        // append variable to raw model\n        wrappedObj.instances.push(diffInst[x].getWrappedObj());\n\n        // add variable to geppetto object model\n            \n        currentModelInst.push(diffInst[x]);\n            \n\n        // find new potential instance paths and add to the list\n        const newInstancePath = createInstancePathObj(diffInst[x]);\n        this.allPaths.push(newInstancePath);\n        this.allPathsIndexing.push(newInstancePath);\n\n        // let's populate the shortcut in the parent of the variable, this might not exist if it was a fetch\n            \n        // window.Instances.push(diffInst[x]);\n          \n        this.geppettoModel[diffInst[x].getId()] = diffInst[x];\n      }\n\n    }\n    return diffReportInst;\n  },\n            \n  mergeValue: function (rawModel, overrideTypes) {\n    if (overrideTypes == undefined) {\n      overrideTypes = false;\n    }\n\n    this.newPathsIndexing = [];\n\n    // diff object to report back what changed / has been added\n    var diffReport = { variables: [], types: [], libraries: [], worlds: [] };\n    var diffVars = diffReport.variables;\n\n\n    // STEP 1: create new geppetto model to merge into existing one\n    var diffModel = this.createGeppettoModel(rawModel, false, false);\n\n    // STEP 1.5: add world\n    if (rawModel.worlds && rawModel.worlds.length) {\n      for (let world of rawModel.worlds) {\n        if (!world.synched) {\n          diffReport.worlds.push(world);\n          diffVars = world.variables;\n        }\n      }\n    }\n        \n\n    // STEP 2: add libraries/types if any are different (both to object model and json model)\n    var diffLibs = diffModel.getLibraries();\n    var libs = this.geppettoModel.getLibraries();\n    var libMatch = false;\n    var i = 0, j = 0;\n    for (i = 0; i < diffLibs.length; i++) {\n      if (diffLibs[i].getWrappedObj().synched == true) {\n        continue;\n      }\n      for (j = 0; j < libs.length; j++) {\n        if (diffLibs[i].getPath() == libs[j].getPath()) {\n          libMatch = true;\n          break;\n        }\n      }\n      if (libMatch) {\n        break;\n      }\n    }   \n    // diffReport.libraries.push(diffLibs[i]);\n    var diffTypes = diffLibs[i].getTypes();\n    var existingTypes = libs[j].getTypes();\n    var typeMatch = false;\n    var k = 0, m = 0;\n    for (k = 0; k < diffTypes.length; k++) {\n      if (diffTypes[k].getWrappedObj().synched == true){\n        continue;\n      }\n      for (m = 0; m < existingTypes.length; m++) {\n        if (diffTypes[k].getPath() == existingTypes[m].getPath()) {\n          typeMatch = true;\n          break;\n        }\n      }\n      if (typeMatch) {\n        break;\n      }\n    }\n    // diffReport.types.push(diffTypes[k]);\n    var diffVars = diffTypes[k].getVariables();\n    var vars = existingTypes[m].getVariables();\n    var varMatch = false;\n    for (var x = 0; x < diffVars.length; x++) {\n      if (diffVars[x].getWrappedObj().synched == true) {\n        continue;\n      }\n      for (var y = 0; y < vars.length; y++) {\n        if (diffVars[x].getPath() == vars[y].getPath()) {\n          varMatch = true;\n          this.populateTypeReferences(diffVars[x]);\n          vars[y] = diffVars[x];\n          diffVars.push(vars[y]); // FIXME variables to worlds\n          break;\n        }\n      }\n      if (varMatch) {\n        break;\n      }\n    }            \n    return diffReport;\n  },\n             \n  /**\n   * Updates capabilities of variables and their instances if any\n   *\n   * @param variables\n   */\n  updateCapabilities: function (variables) {\n    // some bit of code encapsulated for private re-use\n    var that = this;\n    var updateInstancesCapabilities = function (instances) {\n      for (var j = 0; j < instances.length; j++) {\n        // check if visual type and inject AVisualCapability\n        var visualType = instances[j].getVisualType();\n        // check if visual type and inject AVisualCapability\n        if ((!(visualType instanceof Array) && visualType != null && visualType != undefined)\n                            || (visualType instanceof Array && visualType.length > 0)) {\n\n          if (!instances[j].hasCapability(Resources.VISUAL_CAPABILITY)) {\n            instances[j].extendApi(AVisualCapability);\n            that.propagateCapabilityToParents(AVisualCapability, instances[j]);\n\n            if (visualType instanceof Array && visualType.length > 1) {\n              throw ( \"Support for more than one visual type is not implemented.\" );\n            }\n\n            // check if it has visual groups - if so add visual group capability\n            if ((typeof visualType.getVisualGroups === \"function\")\n                                    && visualType.getVisualGroups() != null\n                                    && visualType.getVisualGroups().length > 0) {\n              instances[j].extendApi(AVisualGroupCapability);\n              instances[j].setVisualGroups(visualType.getVisualGroups());\n            }\n\n\n          }\n        }\n\n        // check if it has connections and inject AConnectionCapability\n        if (instances[j].getType().getMetaType() == Resources.CONNECTION_TYPE) {\n          if (!instances[j].hasCapability(Resources.CONNECTION_CAPABILITY)) {\n            instances[j].extendApi(AConnectionCapability);\n            that.resolveConnectionValues(instances[j]);\n          }\n        }\n\n        if (instances[j].getType().getMetaType() == Resources.STATE_VARIABLE_TYPE) {\n          if (!instances[j].hasCapability(Resources.STATE_VARIABLE_CAPABILITY)) {\n            instances[j].extendApi(AStateVariableCapability);\n          }\n        }\n\n        if (instances[j].getType().getMetaType() == Resources.DERIVED_STATE_VARIABLE_TYPE) {\n          if (!instances[j].hasCapability(Resources.DERIVED_STATE_VARIABLE_CAPABILITY)) {\n            instances[j].extendApi(ADerivedStateVariableCapability);\n          }\n        }\n                        \n        if (instances[j].getType().getMetaType() == Resources.PARAMETER_TYPE) {\n          if (!instances[j].hasCapability(Resources.PARAMETER_CAPABILITY)) {\n            instances[j].extendApi(AParameterCapability);\n          }\n        }\n\n        // getChildren of instance and recurse by the power of greyskull!\n        updateInstancesCapabilities(instances[j].getChildren());\n      }\n    };\n\n    // update capabilities for variables\n    for (var i = 0; i < variables.length; i++) {\n      var resolvedTypes = variables[i].getTypes();\n      for (var j = 0; j < resolvedTypes.length; j++) {\n        if (resolvedTypes[j].getMetaType() == Resources.PARAMETER_TYPE) {\n          // if a variable has a Parameter type, add AParameterCapability to the variable\n          if (!variables[i].hasCapability(Resources.PARAMETER_CAPABILITY)) {\n            variables[i].extendApi(AParameterCapability);\n          }\n        } else if (resolvedTypes[j].getMetaType() == Resources.CONNECTION_TYPE) {\n          // if a variable has a connection type, add connection capability\n          if (!variables[i].hasCapability(Resources.CONNECTION_CAPABILITY)) {\n            variables[i].extendApi(AConnectionCapability);\n          }\n        }\n      }\n\n      var varInstances = this.getAllInstancesOf(variables[i]);\n\n      // update instances capabilities\n      updateInstancesCapabilities(varInstances);\n    }\n  },\n\n  /**\n   * Adds potential instance paths to internal cache\n   *\n   * @param variables\n   */\n  addPotentialInstancePaths: function (variables) {\n    var potentialInstancePaths = [];\n    var potentialInstancePathsForIndexing = [];\n\n    for (var i = 0; i < variables.length; i++) {\n      this.fetchAllPotentialInstancePaths(variables[i], potentialInstancePaths, potentialInstancePathsForIndexing, '');\n    }\n\n    // add to allPaths and to allPathsIndexing (assumes they are new paths)\n    this.allPaths = this.allPaths.concat(potentialInstancePaths);\n    this.allPathsIndexing = this.allPathsIndexing.concat(potentialInstancePathsForIndexing);\n    this.newPathsIndexing = this.newPathsIndexing.concat(potentialInstancePathsForIndexing);\n  },\n\n  /**\n   * Add potential instance paths to internal cache given a new type\n   *\n   * @param type\n   */\n  addPotentialInstancePathsForTypeSwap: function (type) {\n\n    var typePath = type.getPath();\n    // Get all paths for the new type\n    var partialPathsForNewType = [];\n    var partialPathsForNewTypeIndexing = [];\n\n    this.fetchAllPotentialInstancePathsForType(type, partialPathsForNewType, partialPathsForNewTypeIndexing, []);\n\n    // Get all potential instances for the type we are swapping\n    var potentialInstancesForNewtype = ModelFactory.getAllPotentialInstancesOfType(typePath);\n    var potentialInstancesForNewtypeIndexing = ModelFactory.getAllPotentialInstancesOfType(typePath, this.allPathsIndexing);\n\n    this.allPaths.replace = [];\n    // Generate new paths and add\n    for (var i = 0; i < potentialInstancesForNewtype.length; i++) {\n      for (var j = 0; j < partialPathsForNewType.length; j++) {\n\n        // figure out is we are dealing with statics\n        var path = undefined;\n        if (partialPathsForNewType[j].static === true) {\n          path = partialPathsForNewType[j].path;\n        } else {\n          path = potentialInstancesForNewtype[i] + '.' + partialPathsForNewType[j].path;\n        }\n\n        var entry = {\n          path: path,\n          metaType: partialPathsForNewType[j].metaType,\n          type: partialPathsForNewType[j].type\n        };\n\n        this.allPaths.replace.push(entry);\n      }\n    }\n\n    this.allPathsIndexing.replace = [];\n    this.newPathsIndexing.replace = [];\n    // same as above for indexing paths\n    for (var i = 0; i < potentialInstancesForNewtypeIndexing.length; i++) {\n      for (var j = 0; j < partialPathsForNewTypeIndexing.length; j++) {\n\n        // figure out is we are dealing with statics\n        var path = undefined;\n        if (partialPathsForNewTypeIndexing[j].static === true) {\n          path = partialPathsForNewTypeIndexing[j].path;\n        } else {\n          path = potentialInstancesForNewtypeIndexing[i] + '.' + partialPathsForNewTypeIndexing[j].path;\n        }\n\n        var entry = {\n          path: path,\n          metaType: partialPathsForNewType[j].metaType,\n          type: partialPathsForNewType[j].type\n        };\n\n        this.allPathsIndexing.replace.push(entry);\n        this.newPathsIndexing.replace.push(entry);\n      }\n    }\n\n    // If variable already in allPathsIndexing, newPathsIndexing and allPaths, remove it before adding the new variable\n    for (var list of [this.allPathsIndexing, this.newPathsIndexing, this.allPaths]) {\n      var is = [];\n      for (var i = 0; i < list.length; ++i) {\n        if (list.replace.indexOf(list[i].path) > -1) {\n          is.push(i);\n        }\n      }\n      for (var i = 0; i < list.replace.length; ++i) {\n        if (is[i] > -1) {\n          list.splice(is[i],1);\n        }\n        list.push(list.replace[i]);\n      }\n      delete list.replace;\n    }\n\n    // look for import type references and amend type\n    for (var list of [this.allPaths, this.allPathsIndexing]) {\n      for (var i = 0; i < list.length; ++i) {\n        if (list[i].type == typePath) {\n          list[i].metaType = type.getMetaType();\n        }\n      }\n    }\n  },\n\n  /**\n   * Given a variable, swap a given type out for another type (recursive on nested types and vars)\n   *\n   * @param variable\n   * @param typeToSwapOut\n   * @param typeToSwapIn\n   */\n  swapTypeInVariable: function (variable, typeToSwapOut, typeToSwapIn) {\n    // ugly but we need the actual arrays stored in the variable as we'll be altering them\n    var types = variable.types;\n    var anonTypes = variable.anonymousTypes;\n\n    if (types && types.length > 0) {\n      this.swapTypeInTypes(types, typeToSwapOut, typeToSwapIn);\n    }\n    if (anonTypes && anonTypes.length > 0) {\n      this.swapTypeInTypes(anonTypes, typeToSwapOut, typeToSwapIn);\n    }\n  },\n\n  /**\n   * Given a set of types, swap a given type out for another type (recursive on nested variables)\n   *\n   * @param types\n   * @param typeToSwapOut\n   * @param typeToSwapIn\n   */\n  swapTypeInTypes: function (types, typeToSwapOut, typeToSwapIn) {\n    for (var y = 0; y < types.length; y++) {\n      if (types[y].getMetaType() == typeToSwapOut.getMetaType() && types[y].getId() == typeToSwapOut.getId()) {\n        // swap type referenced with the override one\n        types[y] = typeToSwapIn;\n      } else if (types[y].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        // if composite - recurse for each var\n        var nestedVars = types[y].getVariables();\n        for (var x = 0; x < nestedVars.length; x++) {\n          this.swapTypeInVariable(nestedVars[x], typeToSwapOut, typeToSwapIn);\n        }\n      }\n    }\n  },\n\n  /**\n   * Adds instances to a list of existing instances. It will expand the instance tree if it partially exists or create it if doesn't.\n   * NOTE: instances will only be added if a matching variable can be found in the GeppettoModel\n   */\n  addInstances: function (newInstancesPaths, topInstances, geppettoModel, instanceCreatedCallback = null) {\n    // based on list of new paths, expand instance tree\n    for (var j = 0; j < newInstancesPaths.length; j++) {\n      /*\n       * process instance paths and convert instance path syntax to raw id concatenation syntax\n       * e.g. acnet2.baskets_12[0].v --> acnet2.baskets_12.baskets_12[0].v\n       */\n      var idConcatPath = '';\n      var splitInstancePath = newInstancesPaths[j].split('.');\n      for (var i = 0; i < splitInstancePath.length; i++) {\n        if (splitInstancePath[i].indexOf('[') > -1) {\n          // contains array syntax = so grab array id\n          var arrayId = splitInstancePath[i].split('[')[0];\n          // replace brackets\n          var arrayElementId = splitInstancePath[i];\n\n          splitInstancePath[i] = arrayId + '.' + arrayElementId;\n        }\n\n        idConcatPath += (i != splitInstancePath.length - 1) ? (splitInstancePath[i] + '.') : splitInstancePath[i];\n      }\n      this.buildInstanceHierarchy(idConcatPath, null, geppettoModel, topInstances);\n    }\n\n    // populate shortcuts including new instances just created\n    for (var k = 0; k < topInstances.length; k++) {\n      this.populateChildrenShortcuts(topInstances[k]);\n\n      // populate at window level\n      window[topInstances[k].getId()] = topInstances[k];\n      window.Instances[topInstances[k].getId()] = topInstances[k];\n    }\n\n    if (instanceCreatedCallback) {\n      newInstancesPaths.forEach(newInstance => {\n        if (newInstance !== \"time\") {\n          if (newInstance.includes('.')) {\n            let instanceStrings = newInstance.split(\".\");\n            if (window.Instances[instanceStrings[0]][instanceStrings[1]] !== undefined) {\n              instanceCreatedCallback(newInstance);\n            }\n          } else if (window.Instances[newInstance] !== undefined){\n            instanceCreatedCallback(newInstance);\n          }\n        }\n      })\n    }\n\n  },\n\n  /**\n   * Build instance hierarchy\n   */\n  buildInstanceHierarchy: function (path, parentInstance, model, topLevelInstances) {\n    var variable = null;\n    var newlyCreatedInstance = null;\n    var newlyCreatedInstances = [];\n\n    // STEP 1: find matching first variable in path in the model object passed in\n    var varsIds = path.split('.');\n    // check model MetaType and find variable accordingly\n    if (model.getMetaType() == Resources.GEPPETTO_MODEL_NODE) {\n      var variables = model.getAllVariables();\n      for (var i = 0; i < variables.length; i++) {\n        if (varsIds[0] === variables[i].getId()) {\n          variable = variables[i];\n          break;\n        }\n      }\n    } else if (model.getMetaType() == Resources.VARIABLE_NODE) {\n      var allTypes = model.getTypes();\n\n      // if array, and the array type\n      if (allTypes.length == 1 && allTypes[0].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n        allTypes.push(model.getTypes()[0].getType());\n      }\n\n      // get all variables and match it from there\n      for (var i = 0; i < allTypes.length; i++) {\n        if (allTypes[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n          var variables = allTypes[i].getVariables();\n\n          for (var m = 0; m < variables.length; m++) {\n            if (varsIds[0] === variables[m].getId()) {\n              variable = variables[m];\n              break;\n            }\n          }\n\n          // break outer loop too\n          if (variable != null) {\n            break;\n          }\n        }\n      }\n\n      // check if parent is an array - if so we know the variable cannot exist so set the same variable as the array\n      if (variable == null && parentInstance.getMetaType() == Resources.ARRAY_INSTANCE_NODE) {\n        // the variable associated to an array element is still the array variable\n        variable = model;\n      }\n    }\n\n    // STEP 2: create instance for given variable\n    if (variable != null) {\n\n      var types = variable.getTypes();\n      var arrayType = null;\n      for (var j = 0; j < types.length; j++) {\n        if (types[j].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          arrayType = types[j];\n          break;\n        }\n      }\n\n      // check in top level instances if we have an instance for the current variable already\n      var instancePath = (parentInstance != null) ? (parentInstance.getInstancePath() + '.' + varsIds[0]) : varsIds[0];\n      var matchingInstance = this.findMatchingInstance(instancePath, topLevelInstances);\n\n      if (matchingInstance != null) {\n        // there is a match, simply re-use that instance as the \"newly created one\" instead of creating a new one\n        newlyCreatedInstance = matchingInstance;\n      } else if (arrayType != null) {\n        // when array type, explode into multiple ('size') instances\n        var size = arrayType.getSize();\n\n        // create new ArrayInstance object, add children to it\n        var arrayOptions = {\n          id: variable.getId(),\n          name: variable.getName(),\n          _metaType: Resources.ARRAY_INSTANCE_NODE,\n          variable: variable,\n          size: size,\n          parent: parentInstance\n        };\n        var arrayInstance = this.createArrayInstance(arrayOptions);\n                        \n                   \n        for (var i = 0; i < size; i++) {\n          // create simple instance for this variable\n          var options = {\n            id: variable.getId() + '[' + i + ']',\n            name: variable.getName() + '[' + i + ']',\n            _metaType: Resources.ARRAY_ELEMENT_INSTANCE_NODE,\n            variable: variable,\n            children: [],\n            parent: arrayInstance,\n            index: i\n          };\n          var explodedInstance = this.createArrayElementInstance(options);\n\n          // check if visual type and inject AVisualCapability\n          var visualType = explodedInstance.getVisualType();\n          if ((!(visualType instanceof Array) && visualType != null && visualType != undefined)\n                                || (visualType instanceof Array && visualType.length > 0)) {\n            explodedInstance.extendApi(AVisualCapability);\n            this.propagateCapabilityToParents(AVisualCapability, explodedInstance);\n\n            if (visualType instanceof Array && visualType.length > 1) {\n              throw ( \"Support for more than one visual type is not implemented.\" );\n            }\n\n            // check if it has visual groups - if so add visual group capability\n            if ((typeof visualType.getVisualGroups === \"function\")\n                                    && visualType.getVisualGroups() != null\n                                    && visualType.getVisualGroups().length > 0) {\n              explodedInstance.extendApi(AVisualGroupCapability);\n              explodedInstance.setVisualGroups(visualType.getVisualGroups());\n            }\n          }\n\n          // check if it has connections and inject AConnectionCapability\n          if (explodedInstance.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n            explodedInstance.extendApi(AConnectionCapability);\n            this.resolveConnectionValues(explodedInstance);\n          }\n\n          if (explodedInstance.getType().getMetaType() == Resources.STATE_VARIABLE_TYPE) {\n            explodedInstance.extendApi(AStateVariableCapability);\n          }\n\n          if (explodedInstance.getType().getMetaType() == Resources.DERIVED_STATE_VARIABLE_TYPE) {\n            explodedInstance.extendApi(ADerivedStateVariableCapability);\n          }\n\n          if (explodedInstance.getType().getMetaType() == Resources.PARAMETER_TYPE) {\n            explodedInstance.extendApi(AParameterCapability);\n          }\n\n          // add to array instance (adding this way because we want to access as an array)\n          arrayInstance[i] = explodedInstance;\n\n          // ad to newly created instances list\n          newlyCreatedInstances.push(explodedInstance);\n        }\n\n        //  if there is a parent add to children else add to top level instances\n        if (parentInstance != null && parentInstance != undefined) {\n          parentInstance.addChild(arrayInstance);\n        } else {\n          // NOTE: not sure if this can ever happen (top level instance == array)\n          topLevelInstances.push(arrayInstance);\n        }\n\n      } else if (!variable.isStatic()) {\n        // NOTE: only create instances if variable is NOT static\n\n        // create simple instance for this variable\n        var options = {\n          id: variable.getId(),\n          name: variable.getName(),\n          _metaType: Resources.INSTANCE_NODE,\n          variable: variable,\n          children: [],\n          parent: parentInstance\n        };\n        newlyCreatedInstance = this.createInstance(options);\n\n        // check if visual type and inject AVisualCapability\n        var visualType = newlyCreatedInstance.getVisualType();\n        // check if visual type and inject AVisualCapability\n        if ((!(visualType instanceof Array) && visualType != null && visualType != undefined)\n                            || (visualType instanceof Array && visualType.length > 0)) {\n          newlyCreatedInstance.extendApi(AVisualCapability);\n          // particles can move, we store its state in the time series coming from the statevariablecapability\n          if (visualType.getId() == Resources.PARTICLES_TYPE) {\n            newlyCreatedInstance.extendApi(AParticlesCapability);\n          }\n          this.propagateCapabilityToParents(AVisualCapability, newlyCreatedInstance);\n\n          if (visualType instanceof Array && visualType.length > 1) {\n            throw ( \"Support for more than one visual type is not implemented.\" );\n          }\n\n          // check if it has visual groups - if so add visual group capability\n          if ((typeof visualType.getVisualGroups === \"function\")\n                                && visualType.getVisualGroups() != null\n                                && visualType.getVisualGroups().length > 0) {\n            newlyCreatedInstance.extendApi(AVisualGroupCapability);\n            newlyCreatedInstance.setVisualGroups(visualType.getVisualGroups());\n          }\n\n        }\n\n        // check if it has connections and inject AConnectionCapability\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n          newlyCreatedInstance.extendApi(AConnectionCapability);\n          this.resolveConnectionValues(newlyCreatedInstance);\n        }\n\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.STATE_VARIABLE_TYPE) {\n          newlyCreatedInstance.extendApi(AStateVariableCapability);\n        }\n\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.DERIVED_STATE_VARIABLE_TYPE) {\n          newlyCreatedInstance.extendApi(ADerivedStateVariableCapability);\n        }\n\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.PARAMETER_TYPE) {\n          newlyCreatedInstance.extendApi(AParameterCapability);\n        }\n\n        //  if there is a parent add to children else add to top level instances\n        if (parentInstance != null && parentInstance != undefined) {\n          parentInstance.addChild(newlyCreatedInstance);\n        } else {\n          topLevelInstances.push(newlyCreatedInstance);\n        }\n      }\n    }\n\n    // STEP: 3 recurse rest of path (without first / leftmost var)\n    var newPath = '';\n    for (var i = 0; i < varsIds.length; i++) {\n      if (i != 0) {\n        newPath += (i < (varsIds.length - 1)) ? (varsIds[i] + '.') : varsIds[i];\n      }\n    }\n\n    // if there is a parent instance - recurse with new parameters\n    if (newlyCreatedInstance != null && newPath != '') {\n      this.buildInstanceHierarchy(newPath, newlyCreatedInstance, variable, topLevelInstances);\n    }\n\n    // if there is a list of exploded instances recurse on each\n    if (newlyCreatedInstances.length > 0 && newPath != '') {\n      for (var x = 0; x < newlyCreatedInstances.length; x++) {\n        this.buildInstanceHierarchy(newPath, newlyCreatedInstances[x], variable, topLevelInstances);\n      }\n    }\n  },\n\n  /**\n   * Resolve connection values\n   */\n  resolveConnectionValues: function (connectionInstanceOrVariable) {\n\n    // get initial values\n    var initialValues = null;\n    if (connectionInstanceOrVariable instanceof Instance) {\n      initialValues = connectionInstanceOrVariable.getVariable().getWrappedObj().initialValues;\n    } else if (connectionInstanceOrVariable.getMetaType() == Resources.VARIABLE_NODE) {\n      initialValues = connectionInstanceOrVariable.getWrappedObj().initialValues;\n    }\n\n    // get pointer A and pointer B\n    var connectionValue = initialValues[0].value;\n    // resolve A and B to Pointer Objects\n    var pointerA = this.createPointer(connectionValue.a);\n    var pointerB = this.createPointer(connectionValue.b);\n\n    if (connectionInstanceOrVariable instanceof Instance) {\n      this.augmentPointer(pointerA, connectionInstanceOrVariable);\n      this.augmentPointer(pointerB, connectionInstanceOrVariable);\n    }\n\n    // set A and B on connection\n    connectionInstanceOrVariable.setA(pointerA);\n    connectionInstanceOrVariable.setB(pointerB);\n  },\n\n  /**\n   * Augment pointer with fully qualified chain to point to a specific instance\n   */\n  augmentPointer: function (pointer, connectionInstance) {\n    // find root for this branch\n    var rootInstance = this.findRoot(connectionInstance);\n\n    // find instance for given pointed variable if any\n    var pointedVariable = pointer.getElements()[0].getVariable();\n    var pointedIndex = pointer.getElements()[0].getIndex();\n\n    // TODO: this could return potentially more than one match - need to extend to resolve to one\n    var matchingInstance = this.findMatchingInstanceByID(pointedVariable.getId(), [rootInstance]);\n\n    // traverse branch and build new array of PointerElements down to instance, given instancepath\n    var pointerElements = [];\n    var originalElement = pointer.getElements()[0];\n    this.buildPointerElementsChain(matchingInstance.getRawInstancePath(), rootInstance, pointerElements, originalElement);\n\n    // horribly override elements with newly created ones\n    pointer.elements = pointerElements;\n\n    // add connection instance reference to matching instance for easy retrieval\n    if (pointedIndex > -1) {\n      matchingInstance.getChildren()[pointedIndex].addConnection(connectionInstance);\n    } else {\n      matchingInstance.addConnection(connectionInstance);\n    }\n  },\n\n  /**\n   * Build Pointer elements chain\n   *\n   */\n  buildPointerElementsChain: function (path, instance, pointerElements, originalElement) {\n    var instanceIds = path.split('.');\n\n    if (instance.getId() === instanceIds[0]) {\n      if (originalElement.getVariable().getId() === instanceIds[0]) {\n        // re-use original element\n        pointerElements.push(originalElement);\n      } else {\n        // create pointer element\n        var options = {\n          \"variable\": instance.getVariable(),\n          \"type\": instance.getType(),\n          \"index\": undefined\n        };\n        var pointerEl = new PointerElement(options);\n        pointerElements.push(pointerEl);\n      }\n\n      // build new path\n      var newPath = '';\n      for (var i = 0; i < instanceIds.length; i++) {\n        if (i != 0) {\n          newPath += (i < (instanceIds.length - 1)) ? (instanceIds[i] + '.') : instanceIds[i];\n        }\n      }\n\n      // recurse\n      if (newPath != '') {\n        var children = instance.getChildren();\n        for (var i = 0; i < children.length; i++) {\n          this.buildPointerElementsChain(newPath, children[i], pointerElements, originalElement);\n        }\n      }\n    }\n    // else do nothing, do not recurse on dead branches\n  },\n\n  /**\n   * Find root instance\n   */\n  findRoot: function (instance) {\n    var matching = null;\n\n    var parent = instance.getParent();\n    if (parent == undefined || parent == null) {\n      matching = instance;\n    } else {\n      var recurseMatching = this.findRoot(parent);\n      if (recurseMatching != null) {\n        matching = recurseMatching;\n      }\n    }\n\n    return matching;\n  },\n\n  /**\n   * Propagates a capability to parents of the given instance\n   */\n  propagateCapabilityToParents: function (capability, instance) {\n    var parent = instance.getParent();\n\n    // check if it has capability\n    if (!(parent == undefined || parent == null) && !parent.hasCapability(capability.capabilityId)) {\n      // apply capability\n      parent.extendApi(capability);\n\n      this.propagateCapabilityToParents(capability, parent);\n    }\n\n    // else --> live & let die\n  },\n\n  /**\n   * Find instance(s) given variable id, if any\n   */\n  findMatchingInstanceByID: function (id, instances) {\n    var matching = null;\n\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].getId() == id) {\n        matching = instances[i];\n        break;\n      } else {\n        if (typeof instances[i].getChildren === \"function\") {\n          var recurseMatch = this.findMatchingInstanceByID(id, instances[i].getChildren());\n          if (recurseMatch != null) {\n            matching = recurseMatch;\n            break;\n          }\n        }\n      }\n    }\n\n    return matching;\n  },\n\n  /**\n   * Find instance given instance path (unique), if any\n   */\n  findMatchingInstance: function (instancePath, instances) {\n    var matching = null;\n\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].getRawInstancePath() == instancePath) {\n        matching = instances[i];\n        break;\n      } else {\n        if (typeof instances[i].getChildren === \"function\") {\n          var recurseMatch = this.findMatchingInstance(instancePath, instances[i].getChildren());\n          if (recurseMatch != null) {\n            matching = recurseMatch;\n            break;\n          }\n        }\n      }\n    }\n\n    return matching;\n  },\n\n  /**\n   * Find instance given Type\n   */\n  findMatchingInstancesByType: function (type, instances, matchingInstance) {\n    for (var i = 0; i < instances.length; i++) {\n      var types = instances[i].getTypes();\n      for (var j = 0; j < types.length; j++) {\n        if (types[j] === type || types[j].getVisualType() === type) {\n          matchingInstance.push(instances[i]);\n          break;\n        }\n      }\n\n      if (typeof instances[i].getChildren === \"function\") {\n        this.findMatchingInstancesByType(type, instances[i].getChildren(), matchingInstance);\n      }\n    }\n  },\n\n  /**\n   * Find instance given Variable\n   */\n  findMatchingInstancesByVariable: function (variable, instances, matchingInstance) {\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].getVariable() === variable) {\n        matchingInstance.push(instances[i]);\n        break;\n      }\n\n      if (typeof instances[i].getChildren === \"function\") {\n        this.findMatchingInstancesByVariable(variable, instances[i].getChildren(), matchingInstance);\n      }\n    }\n  },\n\n  /**\n   * Build \"list\" of variables that have a visual type\n   */\n  fetchVarsWithVisualTypes: function (node, varsWithVizTypes, parentPath) {\n    /*\n     * build \"list\" of variables that have a visual type (store \"path\")\n     * check meta type - we are only interested in variables\n     */\n    var path = (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId());\n    if (node.getMetaType() == Resources.VARIABLE_NODE) {\n      var allTypes = node.getTypes();\n      for (var i = 0; i < allTypes.length; i++) {\n        // if normal type or composite type check if it has a visual type\n        if (allTypes[i].getMetaType() == Resources.TYPE_NODE || allTypes[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n          var vizType = allTypes[i].getVisualType();\n\n          if (vizType != undefined && vizType != null) {\n            // ADD to list of vars with viz types\n            varsWithVizTypes.push(path);\n          }\n        } else if (allTypes[i].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          // if array type, need to check what type the array is of\n          var arrayType = allTypes[i].getType();\n          var vizType = arrayType.getVisualType();\n\n          if (vizType != undefined && vizType != null) {\n            // ADD to list of vars with viz types\n            varsWithVizTypes.push(path);\n          }\n        } else if ((allTypes[i].getMetaType() == Resources.VISUAL_TYPE_NODE) || (allTypes[i].getMetaType() == Resources.COMPOSITE_VISUAL_TYPE_NODE)) {\n          varsWithVizTypes.push(path);\n        }\n\n        // RECURSE on any variables inside composite types\n        if (allTypes[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n          var vars = allTypes[i].getVariables();\n\n          if (vars != undefined && vars != null) {\n            for (var j = 0; j < vars.length; j++) {\n              this.fetchVarsWithVisualTypes(vars[j], varsWithVizTypes, (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId()));\n            }\n          }\n        } else if (allTypes[i].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          var arrayType = allTypes[i].getType();\n\n          // check if the array is of composite type and if so recurse too on contained variables\n          if (arrayType.getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n            var vars = arrayType.getVariables();\n\n            if (vars != undefined && vars != null) {\n              for (var j = 0; j < vars.length; j++) {\n                this.fetchVarsWithVisualTypes(vars[j], varsWithVizTypes, (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId()));\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   *\n   * @param node\n   * @param path\n   * @returns {boolean}\n   */\n  includePotentialInstance: function (node, path) {\n    if (node.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n      return false;\n    }\n\n    if (node.getType().getMetaType() == Resources.TEXT_TYPE) {\n      return false;\n    }\n\n    var nested = this.getNestingLevel(path);\n    if (node.getType().getMetaType() == Resources.COMPOSITE_TYPE_NODE && nested > 2) {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * Get nesting level given entity path\n   *\n   * @param path\n   * @returns {number}\n   */\n  getNestingLevel: function (path) {\n    return path.length - path.replace(/\\./g, '').length;\n  },\n\n  /**\n   * Utility function to print instance tree to console\n   */\n  printInstanceStats: function () {\n    var stats = {};\n    for (var i = 0; i < this.allPaths.length; i++) {\n      var path = this.allPaths[i];\n      if (!Object.prototype.hasOwnProperty.call(stats,path.metaType)) {\n        stats[path.metaType] = 0;\n      }\n      stats[path.metaType]++;\n    }\n    console.log(stats);\n  },\n\n  /**\n   * Build list of potential instance paths (excluding connection instances)\n   */\n  fetchAllPotentialInstancePaths: function (node, allPotentialPaths, allPotentialPathsForIndexing, parentPath) {\n    // build new path\n    var xpath = '';\n    var nodeRef = node;\n    var isStaticVar = (nodeRef instanceof Variable) && node.isStatic();\n\n    if (isStaticVar){\n      /*\n       * NOTE: for static variables, we add the variable path to the indexing list as ...\n       * NOTE: it's the only way to access the variable since there are no instances for static variables\n       */\n      xpath = node.getPath();\n    } else {\n      xpath = (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId());\n    }\n\n    // build entry for path storing and indexing\n    var entry = { path: xpath, metaType: node.getType().getMetaType(), type: node.getType().getPath(), static: isStaticVar };\n\n    /*\n     * if this is a static node check if we already added entry for the exact same path\n     * NOTE: can't do it always for instances as it would slow things down A LOT\n     */\n    var staticVarAlreadyAdded = false;\n    if (isStaticVar){\n      staticVarAlreadyAdded = (this.allStaticVarsPaths[entry.path] != undefined);\n      if (!staticVarAlreadyAdded){\n        this.allStaticVarsPaths[entry.path] = entry;\n      }\n    }\n\n    // always add if not a static var, otherwise check that it wasnt already added\n    if (!isStaticVar || (isStaticVar && !staticVarAlreadyAdded)){\n      allPotentialPaths.push(entry);\n      // only add to indexing if it's not a connection or nested in a composite type\n      if (this.includePotentialInstance(node, xpath)) {\n        allPotentialPathsForIndexing.push(entry);\n      }\n    }\n\n    var potentialParentPaths = [];\n    // check meta type - we are only interested in NON-static variables\n    if ((nodeRef instanceof Variable) && !node.isStatic()) {\n      var allTypes = node.getTypes();\n\n      var arrayType = undefined;\n      for (var m = 0; m < allTypes.length; m++) {\n        if (allTypes[m].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          arrayType = allTypes[m];\n        }\n      }\n\n      // STEP 1: build list of potential parent paths\n      if (arrayType != undefined) {\n        var arrayPath = arrayType.getType().getPath();\n        var arrayMetaType = arrayType.getType().getMetaType();\n        // add the [*] entry\n        if (arrayType.getSize() > 1) {\n          var starPath = xpath + '[' + '*' + ']';\n          potentialParentPaths.push(starPath);\n\n          var starEntry = {\n            path: starPath,\n            metaType: arrayMetaType,\n            type: arrayPath\n          };\n          allPotentialPaths.push(starEntry);\n          allPotentialPathsForIndexing.push(starEntry);\n        }\n\n        // add each array element path\n        for (var n = 0; n < arrayType.getSize(); n++) {\n          var arrayElementPath = xpath + '[' + n + ']';\n          potentialParentPaths.push(arrayElementPath);\n\n          var arrayElementEntry = {\n            path: arrayElementPath,\n            metaType: arrayMetaType,\n            type: arrayPath\n          };\n          allPotentialPaths.push(arrayElementEntry);\n          if (this.includePotentialInstance(node, arrayElementPath)) {\n            allPotentialPathsForIndexing.push(arrayElementEntry);\n          }\n        }\n      } else {\n        potentialParentPaths.push(xpath);\n      }\n\n      // STEP 2: RECURSE on ALL potential parent paths\n      var allTypes = node.getTypes();\n      for (var i = 0; i < allTypes.length; i++) {\n        // RECURSE on any variables inside composite types\n        this.fetchAllPotentialInstancePathsForType(allTypes[i], allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths);\n      }\n    }\n  },\n\n  /**\n   * Build list of partial instance types starting from a type\n   */\n  fetchAllPotentialInstancePathsForType: function (type, allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths) {\n    if (type.getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n      var vars = type.getVariables();\n\n      if (vars != undefined && vars != null) {\n        for (var j = 0; j < vars.length; j++) {\n          if (potentialParentPaths.length > 0) {\n            for (var g = 0; g < potentialParentPaths.length; g++) {\n              this.fetchAllPotentialInstancePaths(vars[j], allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths[g]);\n            }\n          } else {\n            // used for partial instance path generation\n            this.fetchAllPotentialInstancePaths(vars[j], allPotentialPaths, allPotentialPathsForIndexing, '');\n          }\n        }\n      }\n    } else if (type.getMetaType() == Resources.ARRAY_TYPE_NODE) {\n      var arrayType = type.getType();\n\n      // check if the array is of composite type and if so recurse too on contained variables\n      if (arrayType.getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        var vars = arrayType.getVariables();\n\n        if (vars != undefined && vars != null) {\n          for (var l = 0; l < vars.length; l++) {\n            if (potentialParentPaths.length > 0) {\n              for (var h = 0; h < potentialParentPaths.length; h++) {\n                this.fetchAllPotentialInstancePaths(vars[l], allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths[h]);\n              }\n            } else {\n              // used for partial instance path generation\n              this.fetchAllPotentialInstancePaths(vars[l], allPotentialPaths, allPotentialPathsForIndexing, '');\n            }\n          }\n        }\n      }\n    }\n  },\n\n  /** Creates a simple composite */\n  createModel: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node, parent: undefined };\n    }\n\n    var n = new GeppettoModel(options);\n\n    return n;\n  },\n\n  /** Creates a simple composite */\n  createLibrary: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node };\n    }\n\n    var n = new Library(options);\n\n    return n;\n  },\n\n  /** Creates a variable */\n  createVariable: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node, types: node.types };\n    }\n\n    var v = new Variable(options);\n    v.values = this.createValues(node.initialValues, v);\n    return v;\n  },\n\n  createValues: function (initialValuesObject, variable){\n    var values = [];\n    var options;\n    if (initialValuesObject != undefined){\n      for (var i = 0; i < initialValuesObject.length; i++){\n        var value = this.createValue(initialValuesObject[i], options);\n        value.parent = variable;\n        values.push(value);\n      }\n    }\n    return values;\n  }, \n            \n  createValue: function (valueNode, options){\n    if (options == null || options == undefined) {\n      options = { wrappedObj: valueNode };   \n    }\n    var value;\n    if (valueNode.value.eClass == \"ImportValue\"){\n      /*\n       * getID() was returning undefined, hence hack - ask about this.\n       * if I dont do this then path is \"Model.nwbLibrary.responseType_10.recording_10.undefined\"\n       */\n      value = new ImportValue(options);\n    } else {\n      value = new Value(options);\n    }\n               \n    return value;\n  },\n            \n  /** Creates a datasource */\n  createDatasource: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node };\n    }\n\n    var d = new Datasource(options);\n\n    // create queries\n    d.queries = this.createQueries(node.queries, d);\n\n    return d;\n  },\n\n  /**\n   * Create array of client query objects given raw json query objects and a parent\n   *\n   * @param rawQueries\n   * @param parent\n   * @returns {Array}\n   */\n  createQueries: function (rawQueries, parent) {\n    var queries = [];\n\n    if (rawQueries != undefined) {\n      for (var i = 0; i < rawQueries.length; i++) {\n        var q = this.createQuery(rawQueries[i]);\n        // set datasource as parent\n        q.parent = parent;\n        // push query to queries array\n        queries.push(q);\n      }\n    }\n\n    return queries;\n  },\n\n  createQuery: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node };\n    }\n\n    var q = new Query(options);\n\n    // set matching criteria\n    var matchingCriteriaRefs = node.matchingCriteria;\n    if (node.matchingCriteria != undefined){\n      for (var i = 0; i < matchingCriteriaRefs.length; i++){\n        // get type ref\n        var typeRefs = matchingCriteriaRefs[i].type;\n        var typesCriteria = [];\n        for (var j = 0; j < typeRefs.length; j++) {\n          // resolve type ref\n          var ref = typeRefs[j].$ref;\n          var type = this.resolve(ref);\n  \n          // push to q.matchingCriteria\n          if (type instanceof Type) {\n            typesCriteria.push(type);\n          }\n        }\n  \n        q.matchingCriteria.push(typesCriteria);\n      }\n    }\n\n    return q;\n  },\n\n  getTypeOptions: function (node, options) {\n    if (options == null || options == undefined) {\n      return { wrappedObj: node, superType: node.superType, visualType: node.visualType };\n    } else {\n      return options;\n    }\n  },\n\n  /** Creates a type */\n  createType: function (node, options) {\n    var t = new Type(this.getTypeOptions(node, options));\n    if (node.tags) {\n      t.tags = node.tags.map(tag => this.resolve(tag.$ref));\n    }\n    return t;\n  },\n\n  /** Creates an import type */\n  createImportType: function (node, options) {\n    var it = new ImportType(this.getTypeOptions(node, options));\n    return it;\n  },\n\n  /** Creates a composite type */\n  createCompositeType: function (node, options) {\n    var t = new CompositeType(this.getTypeOptions(node, options));\n    t.variables = this.createVariables(node.variables, t);\n\n    return t;\n  },\n\n  /** Creates a composite visual type */\n  createCompositeVisualType: function (node, options) {\n    var t = new CompositeVisualType(this.getTypeOptions(node, options));\n    t.variables = this.createVariables(node.variables, t);\n    if (node.visualGroups != undefined) {\n      t.visualGroups = this.createVisualGroups(node.visualGroups, t);\n    }\n\n    return t;\n  },\n\n  /** Creates a composite type */\n  createArrayType: function (node, options) {\n    var t = new ArrayType(this.getTypeOptions(node, options));\n    t.size = node.size;\n    t.type = node.arrayType;\n\n    return t;\n  },\n\n  updateConnectionInstances: function (instance) {\n    var typesToSearch = this.getAllTypesOfMetaType(Resources.COMPOSITE_TYPE_NODE);\n    var connectionVariables = this.getAllVariablesOfMetaType(typesToSearch, Resources.CONNECTION_TYPE);\n    var connectionInstances = [];\n\n    for (var x = 0; x < connectionVariables.length; x++) {\n      var variable = connectionVariables[x];\n      var present = false;\n      if (instance.connections) {\n        // if there's already connections we haave to check if there is already one for this variable\n        for (var y = 0; y < instance.connections.length; y++) {\n          if (instance.connections[y].getVariable() == variable) {\n            present = true;\n            break;\n          }\n        }\n\n      }\n      if (!present) {\n        var initialValues = variable.getWrappedObj().initialValues;\n\n        var connectionValue = initialValues[0].value;\n        // resolve A and B to Pointer Objects\n        var pointerA = this.createPointer(connectionValue.a);\n        var pointerB = this.createPointer(connectionValue.b);\n        if (pointerA.getPath() == instance.getId() || pointerB.getPath() == instance.getId()) {\n          // TODO if there is more than one instance of the same projection this code will break\n          var parentInstance = this.instances.getInstance(this.getAllPotentialInstancesEndingWith(variable.getParent().getId())[0]);\n          var options = {\n            id: variable.getId(),\n            name: variable.getId(),\n            _metaType: Resources.INSTANCE_NODE,\n            variable: variable,\n            children: [],\n            parent: parentInstance\n          };\n          var connectionInstance = this.createInstance(options);\n          connectionInstance.extendApi(AConnectionCapability);\n          this.augmentPointer(pointerA, connectionInstance);\n          this.augmentPointer(pointerB, connectionInstance);\n\n          // set A and B on connection\n          connectionInstance.setA(pointerA);\n          connectionInstance.setB(pointerB);\n\n          connectionInstances.push(connectionInstance);\n        }\n      }\n    }\n\n  },\n\n  /** Creates an instance */\n  createExternalInstance: function (path, projectId) {\n    var options = {\n      _metaType: Resources.INSTANCE_NODE,\n      path: path,\n      projectId: projectId,\n    };\n          \n    return new ExternalInstance(options);\n  },\n            \n  /** Creates an instance */\n  createInstance: function (options) {\n    if (options == null || options == undefined) {\n      options = { _metaType: Resources.INSTANCE_NODE };\n    }\n\n    var i = new Instance(options);\n\n    return i;\n  },\n\n  /** Creates an array element istance */\n  createArrayElementInstance: function (options) {\n    if (options == null || options == undefined) {\n      options = { _metaType: Resources.ARRAY_ELEMENT_INSTANCE_NODE };\n    }\n\n    var aei = new ArrayElementInstance(options);\n\n    return aei;\n  },\n\n  /** Creates an array istance */\n  createArrayInstance: function (options) {\n    if (options == null || options == undefined) {\n      options = { _metaType: Resources.ARRAY_INSTANCE_NODE };\n    }\n\n    var a = new ArrayInstance(options);\n\n    return a;\n  },\n\n\n  /** Creates visual groups */\n  createVisualGroups: function (nodes, parent) {\n    var visualGroups = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      if (nodes[i].visualGroupElements != undefined) {\n        var options = { wrappedObj: nodes[i] };\n\n        // get tags from raw json abd add to options\n        var tagRefObjs = nodes[i].tags;\n        if (tagRefObjs != undefined) {\n          var tags = [];\n\n          // populate tags from references\n          for (var j = 0; j < tagRefObjs.length; j++) {\n            tags.push(this.resolve(tagRefObjs[j].$ref).name);\n          }\n\n          // add to options to init object\n          options.tags = tags;\n        }\n\n        var vg = new VisualGroup(options);\n        vg.parent = parent;\n        vg.visualGroupElements = this.createVisualGroupElements(nodes[i].visualGroupElements, vg);\n\n        visualGroups.push(vg);\n      }\n    }\n\n    return visualGroups;\n  },\n\n\n  /** Creates visual group elements */\n  createVisualGroupElements: function (nodes, parent) {\n    var visualGroupElements = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var options = { wrappedObj: nodes[i], parent: parent };\n\n      var vge = new VisualGroupElement(options);\n\n      visualGroupElements.push(vge);\n    }\n\n    return visualGroupElements;\n  },\n\n  /**\n   * Clean up state of instance tree\n   */\n  cleanupInstanceTreeState: function () {\n    // get state variables - clean out time series and watched status\n    var stateVariableInstances = this.getAllInstancesOf(Resources.STATE_VARIABLE_TYPE_PATH);\n    for (var i = 0; i < stateVariableInstances.length; i++) {\n      stateVariableInstances[i].setTimeSeries(null);\n      stateVariableInstances[i].setWatched(false, false);\n    }\n    // get parameters - clean out values\n    var parameterInstances = this.getAllInstancesOf(Resources.PARAMETER_TYPE_PATH);\n    for (var j = 0; j < parameterInstances.length; j++) {\n      parameterInstances[j].setValue(null,false);\n    }\n  },\n\n  /**\n   * Gets all instances with given capability\n   *\n   * @param capabilityId\n   * @returns {Array}\n   */\n  getAllInstancesWithCapability: function (capabilityId, instances) {\n    var matchingInstances = [];\n\n    // traverse everything and populate matching instances\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].hasCapability(capabilityId)) {\n        matchingInstances.push(instances[i]);\n      }\n\n      if (typeof instances[i].getChildren === \"function\") {\n        matchingInstances = matchingInstances.concat(this.getAllInstancesWithCapability(capabilityId, instances[i].getChildren()));\n      }\n    }\n\n    return matchingInstances;\n  },\n\n  /**\n   * Get all instance given a type or a variable (path or actual object)\n   */\n  getAllInstancesOf: function (typeOrVar, instances) {\n    if (typeof typeOrVar === 'string' || typeOrVar instanceof String) {\n      // it's an evil string, try to eval as path in the name of satan\n      typeOrVar = eval(typeOrVar);\n    }\n\n    var allInstances = [];\n\n    if (instances == undefined) {\n      instances = this.instances;\n    }\n\n    if (typeOrVar instanceof Type) {\n      allInstances = this.getAllInstancesOfType(typeOrVar, instances);\n    } else if (typeOrVar.getMetaType() == Resources.VARIABLE_NODE) {\n      allInstances = this.getAllInstancesOfVariable(typeOrVar, instances);\n    } else {\n      // good luck\n      throw ( \"The argument \" + typeOrVar + \" is neither a Type or a Variable. Good luck.\" );\n    }\n\n    return allInstances;\n  },\n\n  /**\n   * Get all instances given a type\n   */\n  getAllInstancesOfType: function (type, instances) {\n    if (!(type instanceof Type)) {\n      // raise hell\n      throw ( \"The argument \" + type + \" is not a Type or a valid Type path. Good luck.\" );\n    }\n\n    if (instances == undefined) {\n      instances = this.instances;\n    }\n\n    // do stuff\n    var matchingInstances = [];\n    this.findMatchingInstancesByType(type, instances, matchingInstances);\n\n    return matchingInstances;\n  },\n\n  /**\n   * Get all instances given a variable\n   */\n  getAllInstancesOfVariable: function (variable, instances) {\n    if (!(variable.getMetaType() == Resources.VARIABLE_NODE)) {\n      // raise hell\n      throw ( \"The argument \" + variable + \" is not a Type or a valid Type path. Good luck.\" );\n    }\n\n    if (instances == undefined) {\n      instances = this.instances;\n    }\n\n    // do stuff\n    var matchingInstances = [];\n    this.findMatchingInstancesByVariable(variable, instances, matchingInstances);\n\n    return matchingInstances;\n  },\n\n  /**\n   * Get all POTENTIAL instances ending with a given string\n   */\n  getAllPotentialInstancesEndingWith: function (endingString) {\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < this.allPaths.length; i++) {\n      if (this.allPaths[i].path.endsWith(endingString) && this.allPaths[i].path.indexOf(\"*\") == -1) {\n        matchingPotentialInstances.push(this.allPaths[i].path);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n\n  /**\n   * Get all POTENTIAL instances starting with a given string\n   */\n  getAllPotentialInstancesStartingWith: function (startingString) {\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < this.allPaths.length; i++) {\n      if (this.allPaths[i].path.startsWith(startingString) && this.allPaths[i].path.indexOf(\"*\") == -1) {\n        matchingPotentialInstances.push(this.allPaths[i].path);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n  /**\n   * Get all POTENTIAL instances of a given type\n   */\n  getAllPotentialInstancesOfType: function (typePath, paths) {\n    if (paths == undefined) {\n      paths = this.allPaths;\n    }\n\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < paths.length; i++) {\n      if (paths[i].type == typePath) {\n        matchingPotentialInstances.push(paths[i].path);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n  /**\n   * Get all POTENTIAL instances of a given meta type\n   */\n  getAllPotentialInstancesOfMetaType: function (metaType, paths, includeType) {\n    if (paths == undefined) {\n      paths = this.allPaths;\n    }\n\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < paths.length; i++) {\n      if (paths[i].metaType == metaType) {\n        var itemToPush = paths[i].path;\n        if (includeType === true){\n          itemToPush = paths[i];\n        }\n        matchingPotentialInstances.push(itemToPush);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n  /**\n   * Get all types of given a meta type (string)\n   *\n   * @param metaType - metaType String\n   *\n   * @returns {Array} - Types\n   */\n  getAllTypesOfMetaType: function (metaType) {\n    var types = [];\n\n    // iterate all libraries\n    var libraries = this.geppettoModel.getLibraries();\n    for (var i = 0; i < libraries.length; i++) {\n      // iterate all types within library\n      var libraryTypes = libraries[i].getTypes();\n      for (var j = 0; j < libraryTypes.length; j++) {\n        // add if its metatype matches\n        if (libraryTypes[j].getMetaType() == metaType) {\n          types.push(libraryTypes[j]);\n        }\n      }\n    }\n\n    return types;\n  },\n\n  /**\n   * Get all types of given a type (checks inheritance)\n   *\n   * @param type - Type object or Type path string\n   *\n   * @returns {Array} - Types\n   */\n  getAllTypesOfType: function (type) {\n    if (typeof type === 'string' || type instanceof String) {\n      // it's an evil string, try to eval as type path in the name of baal\n      type = eval(type);\n    }\n\n    var types = [];\n\n    // iterate all libraries\n    var libraries = this.geppettoModel.getLibraries();\n    for (var i = 0; i < libraries.length; i++) {\n      // iterate all types within library\n      var libraryTypes = libraries[i].getTypes();\n      for (var j = 0; j < libraryTypes.length; j++) {\n        if (libraryTypes[j] == type) {\n          // add if it's a straight match (the type himself)\n          types.push(libraryTypes[j]);\n        } else if (libraryTypes[j].getSuperType() != undefined && libraryTypes[j].getSuperType() != null) {\n          // check list of super types\n          var superTypes = libraryTypes[j].getSuperType();\n\n          if (!(superTypes instanceof Array)) {\n            superTypes = [superTypes];\n          }\n\n          for (var w = 0; w < superTypes.length; w++) {\n            if (superTypes[w] == type) {\n              // add if superType matches\n              types.push(libraryTypes[j]);\n              // sufficient condition met, break the loop\n              break;\n            }\n          }\n        } else {\n          // TODO: no immediate matches - recurse on super type and see if any matches if any matches add this type\n          /*\n           * if(libraryTypes[j].getSuperType() != undefined && libraryTypes[j].getSuperType() != null) {\n           * var superTypeMatches = this.getAllTypesOfType(libraryTypes[j].getSuperType());\n           * if (superTypeMatches.length > 0) {\n           * types.push(libraryTypes[j]);\n           * }\n           * }\n           */\n        }\n      }\n    }\n\n    return types;\n  },\n\n  /**\n   * Gets all variables of the types provided\n   *\n   * @param typesToSearch\n   *\n   * @param typeToMatch\n   *\n   * @returns {Array}\n   */\n  getAllVariablesOfType: function (typesToSearch, typeToMatch, recursive) {\n    // check if array and if not \"make it so\"\n    if (!(typesToSearch instanceof Array)) {\n      typesToSearch = [typesToSearch];\n    }\n\n    var variables = [];\n\n    for (var i = 0; i < typesToSearch.length; i++) {\n      if (typesToSearch[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        var nestedVariables = typesToSearch[i].getVariables();\n        if (typeToMatch != undefined && typeToMatch != null) {\n          for (var j = 0; j < nestedVariables.length; j++) {\n            var varTypes = nestedVariables[j].getTypes();\n            for (var x = 0; x < varTypes.length; x++) {\n              if (varTypes[x] == typeToMatch) {\n                variables.push(nestedVariables[j]);\n              } else if (varTypes[x].getSuperType() != undefined) {\n                // check list of super types\n                var superTypes = varTypes[x].getSuperType();\n\n                if (!(superTypes instanceof Array)) {\n                  superTypes = [superTypes];\n                }\n\n                for (var w = 0; w < superTypes.length; w++) {\n                  if (superTypes[w] == typeToMatch) {\n                    variables.push(nestedVariables[j]);\n                    // sufficient condition met, break the loop\n                    break;\n                  }\n                }\n              } else if (varTypes[x].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n                // check if type is composite and recurse\n                variables = variables.concat(this.getAllVariablesOfType([varTypes[x]], typeToMatch));\n              }\n              if (recursive) {\n                this.getAllVariablesOfType(varTypes[x], typeToMatch, recursive, variables);\n              }\n            }\n          }\n        } else {\n          variables = variables.concat(nestedVariables);\n        }\n      }\n    }\n\n    return variables;\n  },\n\n\n  /**\n   * Gets all variables with the given metaType\n   *\n   * @param typesToSearch\n   *\n   * @param metaType\n   *\n   * @returns {Array}\n   */\n  getAllVariablesOfMetaType: function (typesToSearch, metaType) {\n    // check if array and if not \"make it so\"\n    if (!(typesToSearch.constructor === Array)) {\n      typesToSearch = [typesToSearch];\n    }\n\n    var variables = [];\n\n    for (var i = 0; i < typesToSearch.length; i++) {\n      if (typesToSearch[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        var nestedVariables = typesToSearch[i].getVariables();\n        if (metaType != undefined && metaType != null) {\n          for (var j = 0; j < nestedVariables.length; j++) {\n            var varTypes = nestedVariables[j].getTypes();\n            for (var x = 0; x < varTypes.length; x++) {\n              if (varTypes[x].getMetaType() == metaType) {\n                variables.push(nestedVariables[j]);\n              }\n            }\n          }\n        } else {\n          variables = variables.concat(nestedVariables);\n        }\n      }\n    }\n\n    return variables;\n  },\n\n  /**\n   * Get top level variables by id\n   *\n   * @param variableIds\n   * @returns {Array}\n   */\n  getTopLevelVariablesById: function (variableIds){\n    var variables = [];\n\n    for (var i = 0; i < variableIds.length; i++){\n      if (window.Model[variableIds[i]] != undefined){\n        variables.push(window.Model[variableIds[i]]);\n      }\n    }\n\n    return variables;\n  },\n\n  /**\n   * Get matching queries given a type and optional results type\n   *\n   * @param type\n   * @param resultType\n   */\n  getMatchingQueries : function (type, resultType){\n    var topLevelQueries = window.Model.getQueries();\n    var matchingQueries = [];\n\n    // iterate top level queries\n    for (var k = 0; k < topLevelQueries.length; k++){\n      // check matching criteria first\n      if (topLevelQueries[k].matchesCriteria(type)){\n        // if resultType is defined then match on that too\n        if (resultType != undefined){\n          if (resultType == topLevelQueries[k].getResultType()){\n            matchingQueries.push(topLevelQueries[k]);\n          }\n        } else {\n          matchingQueries.push(topLevelQueries[k]);\n        }\n      }\n    }\n\n    return matchingQueries;\n  },\n            \n  getHTMLVariable: function (typesToSearch, metaType, identifier){\n    var variables = this.getAllVariablesOfMetaType(typesToSearch, metaType);\n    for (var i in variables){\n      if (identifier != null && identifier != undefined){\n        if (variables[i].getId() == identifier){\n          return variables[i];\n        }\n      }\n    }\n              \n    return null;\n  },\n\n  /**\n   * Get total count of instances including children\n   *\n   * @param instances\n   */\n  getInstanceCount: function (instances) {\n    var count = 0;\n\n    count += instances.length;\n\n    for (var i = 0; i < instances.length; i++) {\n      count += this.getInstanceCount(instances[i].getChildren());\n    }\n\n    return count;\n  },\n\n  /**\n   * Delete instance, also removing types and variables\n   *\n   * @param instance\n   */\n  deleteInstance: function (instance, deleteCallback) {\n    var instancePath = instance.getPath();\n    var removeMatchingInstanceFromArray = function (instanceArray, instance) {\n      var index = null;\n      for (var i = 0; i < instanceArray.length; i++) {\n        if (instanceArray[i].getPath() == instance.getPath()) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index != null) {\n        instanceArray.splice(index, 1);\n      }\n    };\n\n    // delete instance\n    var parent = instance.getParent();\n    if (parent == undefined) {\n      /*\n       * parent is window\n       * remove from array of children\n       */\n      removeMatchingInstanceFromArray(window.Instances, instance);\n      // remove reference\n      delete window[instance.getId()];\n    } else {\n      // remove from array of children\n      removeMatchingInstanceFromArray(parent.getChildren(), instance);\n      // remove reference\n      delete parent[instance.getId()];\n    }\n\n    // unresolve type\n    for (var j = 0; j < instance.getTypes().length; j++) {\n      this.unresolveType(instance.getTypes()[j]);\n    }\n\n    // re-run model shortcuts\n    this.populateChildrenShortcuts(this.geppettoModel);\n\n    if (deleteCallback) {\n      deleteCallback(instancePath);\n    }\n    \n  },\n\n  /**\n   * Unresolve type\n   *\n   * @param type\n   */\n  unresolveType: function (type) {\n    var libs = this.geppettoModel.getLibraries();\n    var typePath = type.getPath();\n    // swap the type with type.overrideType if any is found\n    if (type.overrideType != undefined) {\n      // get all types in the current model\n      var typeToLibraryMap = [];\n      var allTypesInModel = [];\n      for (var w = 0; w < libs.length; w++) {\n        allTypesInModel = allTypesInModel.concat(libs[w].getTypes());\n        for (var v = 0; v < libs[w].getTypes().length; v++) {\n          typeToLibraryMap[libs[w].getTypes()[v].getPath()] = libs[w];\n        }\n      }\n\n      // fetch variables pointing to the old version of the type\n      var variablesToUpdate = type.getVariableReferences();\n\n      // swap type reference in ALL variables that point to it\n      for (var x = 0; x < variablesToUpdate.length; x++) {\n        this.swapTypeInVariable(variablesToUpdate[x], type, type.overrideType);\n      }\n\n      // find type in library (we need the index)\n      for (var m = 0; m < typeToLibraryMap[typePath].getTypes().length; m++) {\n        if (type.getPath() == typeToLibraryMap[typePath].getTypes()[m].getPath()) {\n          // swap type in raw model\n          typeToLibraryMap[typePath].getWrappedObj().types[m] = type.overrideType.getWrappedObj();\n\n          // swap in object model (this line is probably redundant as the parent hasn't changed)\n          type.overrideType.parent = typeToLibraryMap[typePath];\n          typeToLibraryMap[typePath].getTypes()[m] = type.overrideType;\n        }\n      }\n\n      // populate references for the swapped type\n      this.populateTypeReferences(type.overrideType);\n\n      // add potential instance paths\n      this.addPotentialInstancePaths(variablesToUpdate);\n\n      // update capabilities for variables and instances if any\n      this.updateCapabilities(variablesToUpdate);\n    }\n  },\n\n  /**\n   * A generic method to resolve a reference\n   */\n  resolve: function (refStr) {\n\n    var reference = undefined;\n    /*\n     * Examples of reference strings\n     * //@libraries.0/@types.20/@variables.5/@anonymousTypes.0/@variables.7\n     * //@libraries.1/@types.5\n     * //@tags.1/@tags.5\n     * //@libraries.0/@types.8/@visualGroups.0/@visualGroupElements.1\n     */\n    var raw = refStr.replace(\"geppettoModel#\", \"\");\n\n    raw = raw.replace(/\\//g, '').split('@');\n    for (var i = 0; i < raw.length; i++) {\n      var index = parseInt(raw[i].split('.')[1]);\n      if (raw[i].indexOf('libraries') > -1) {\n        reference = this.geppettoModel.getLibraries()[index];\n      } else if (raw[i].indexOf('variables') > -1) {\n        if (reference == undefined) {\n          reference = this.geppettoModel.getVariables()[index];\n        } else {\n          reference = reference.getVariables()[index];\n        }\n      } else if (raw[i].indexOf('types') > -1) {\n        reference = reference.getTypes()[index];\n      } else if (raw[i].indexOf('anonymousTypes') > -1) {\n        reference = reference.getAnonymousTypes()[index];\n      } else if (raw[i].indexOf('tags') > -1 && i === 1) {\n        reference = this.rawGeppetoModel.tags && this.rawGeppetoModel.tags.length >= index ? this.rawGeppetoModel.tags[index] : this.geppettoModel.tags[index];\n      } else if (raw[i].indexOf('tags') > -1 && i === 2) {\n        reference = reference.tags[index];\n      } else if (raw[i].indexOf('visualGroups') > -1) {\n        reference = reference.getVisualGroups()[index];\n      } else if (raw[i].indexOf('visualGroupElements') > -1) {\n        reference = reference.getVisualGroupElements()[index];\n      } else if (raw[i].indexOf('worlds') > -1) {\n        reference = this.geppettoModel.getWorlds()[index];\n      } else if (raw[i].indexOf('instances') > -1) {           \n        reference = reference.getInstances()[index];\n      } \n    }\n    if (!reference) {\n      console.error(`Error resolving reference ${refStr}`);\n    }\n    return reference;\n  },\n\n\n  getVariables: function (rawGeppettoModel) {\n    if (!rawGeppettoModel.worlds || !rawGeppettoModel.worlds.length) {\n      return rawGeppettoModel.variables;\n    }\n    const world = rawGeppettoModel.worlds[0]; // TODO handle multiple worlds\n    return world.variables;\n  },\n\n  fillWorldsFromRawModel: function (geppettoModel, jsonModel) {\n    geppettoModel.worlds = jsonModel.worlds.map(world => this.createWorld(world));\n  },\n\n  _getStaticInstancePaths: function (geppettoModel) {\n\n    if (geppettoModel.getCurrentWorld === undefined) {\n      if (!geppettoModel.worlds || !geppettoModel.worlds.length) {\n        return [];\n      }\n      const rawModel = geppettoModel;\n      geppettoModel = new GeppettoModel({ wrappedObj: rawModel });\n      this.fillWorldsFromRawModel(geppettoModel, rawModel);\n    }\n    return geppettoModel.getCurrentWorld().getInstances().map(createInstancePathObj);\n  }\n};\n\nexport default ModelFactory;\n\n\nfunction createInstancePathObj (instance) {\n  return {\n    path: instance.getPath(),\n    metaType: instance.getType().getMetaType(),\n    type: instance.getType().getPath(),\n    static: true\n  };\n}\n"],"file":"ModelFactory.js"}