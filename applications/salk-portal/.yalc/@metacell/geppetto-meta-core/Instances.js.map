{"version":3,"sources":["../src/Instances.js"],"names":["augmentInstancesArray","instances","i","length","window","getId","Instances","addInstances","instancePaths","constructor","Array","ModelFactory","Model","getInstance","instancePath","create","override","undefined","InstanceVarName","arrayParameter","j","indexOf","arrayPath","substring","subArrayPath","arrayInstance","arraySize","getSize","splice","x","push","potentialVar","eval","deleteInstance","e"],"mappings":"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","sourcesContent":["/**\n * Client class use to handle Geppetto workflows\n *\n * @module Manager\n * @author Matteo Cantarelli\n */\n\n\nimport ModelFactory from './ModelFactory';\n\n\n/**\n * Augments the instances array with some utilities methods for ease of access\n */\nexport function augmentInstancesArray (instances) {\n  // create global shortcuts to top level instances\n  for (var i = 0; i < instances.length; i++) {\n    // NOTE: tampering with the window object like this is probably a horrible idea\n    window[instances[i].getId()] = instances[i];\n    window.Instances[instances[i].getId()] = instances[i];\n  }\n\n  // add method to add instances to window.Instances\n  instances.addInstances = function (instancePaths) {\n    if (!(instancePaths.constructor === Array)) {\n      // if it's not an array throw it into an array with a single element\n      instancePaths = [instancePaths];\n    }\n\n    ModelFactory.addInstances(instancePaths, window.Instances, window.Model);\n  };\n\n  instances.getInstance = function (instancePath, create, override) {\n    if (create == undefined) {\n      create = true;\n    }\n\n    var instances = [];\n    var InstanceVarName = \"Instances.\";\n    var arrayParameter = true;\n\n    if (!(instancePath.constructor === Array)) {\n      instancePath = [instancePath];\n      arrayParameter = false;\n    }\n\n    // check if we have any [*] for array notation and replace with exploded paths\n    for (var j = 0; j < instancePath.length; j++) {\n      if (instancePath[j].indexOf('[*]') > -1) {\n        var arrayPath = instancePath[j].substring(0, instancePath[j].indexOf('['));\n        var subArrayPath = instancePath[j].substring(instancePath[j].indexOf(']') + 1, instancePath[j].length);\n        var arrayInstance = Instances.getInstance(arrayPath);\n        var arraySize = arrayInstance.getSize();\n\n        // remove original * entry\n        instancePath.splice(j, 1);\n        // add exploded elements\n        for (var x = 0; x < arraySize; x++) {\n          instancePath.push(arrayPath + '[' + x + ']' + subArrayPath);\n        }\n      }\n    }\n\n\n    for (var i = 0; i < instancePath.length; i++) {\n      try {\n        var potentialVar = eval(InstanceVarName + instancePath[i]);\n        if (potentialVar != undefined) {\n          if (override) {\n            ModelFactory.deleteInstance(instances[i]);\n            Instances.addInstances(instancePath[i]);\n            instances.push(eval(InstanceVarName + instancePath[i]));\n          } else {\n            instances.push(potentialVar);\n          }\n        } else {\n          if (create) {\n            Instances.addInstances(instancePath[i]);\n            instances.push(eval(InstanceVarName + instancePath[i]));\n          }\n        }\n      } catch (e) {\n        if (create) {\n          try {\n\n            Instances.addInstances(instancePath[i]);\n            instances[i] = eval(InstanceVarName + instancePath[i]);\n          } catch (e) {\n            throw (\"The instance \" + instancePath[i] + \" does not exist in the current model\");\n          }\n        }\n      }\n    }\n\n    if (instances.length == 1 && !arrayParameter) {\n      // if we received an array we want to return an array even if there's only one element\n      return instances[0];\n    } else {\n      return instances;\n    }\n  }\n      \n}\n\nexport default { augmentInstancesArray }"],"file":"Instances.js"}