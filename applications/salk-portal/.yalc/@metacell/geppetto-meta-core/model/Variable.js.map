{"version":3,"sources":["../../src/model/Variable.js"],"names":["extend","require","ObjectWrapper","Variable","options","prototype","constructor","call","anonymousTypes","undefined","types","pointerValue","capabilities","values","Object","create","getTypes","anonTypes","allTypes","concat","getAnonymousTypes","getType","length","getValues","getValue","getInitialValues","getWrappedObj","initialValues","getInitialValue","isStatic","getPosition","position","getChildren","extendApi","extensionObj","push","capabilityId","hasCapability","i","getCapabilities","setTypes","addVariableReference","module","exports"],"mappings":"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","sourcesContent":["\n\n/**\n * Client class use to represent a variable.\n *\n * @module model/Variable\n * @author Giovanni Idili\n */\n\nconst extend = require('../common/Utils').extend;\nconst ObjectWrapper = require('./ObjectWrapper');\n\nfunction Variable (options) {\n  ObjectWrapper.prototype.constructor.call(this, options);\n  this.anonymousTypes = (options.anonymousTypes != undefined) ? options.anonymousTypes : [];\n  this.types = (options.types != undefined) ? options.types : [];\n  this.pointerValue = options.pointerValue;\n  this.capabilities = [];\n  this.values = (options.values != undefined) ? options.values : [];\n}\n\nVariable.prototype = Object.create(ObjectWrapper.prototype);\nVariable.prototype.constructor = Variable;\n\n\n/**\n * Get the list of types for this variable\n *\n * @command Variable.getTypes()\n *\n * @returns {List<Type>} - array of types\n *\n */\nVariable.prototype.getTypes = function () {\n  var types = (this.types != undefined) ? this.types : [];\n  var anonTypes = (this.anonymousTypes != undefined) ? this.anonymousTypes : [];\n  var allTypes = types.concat(anonTypes);\n  return allTypes;\n};\n\n/**\n * Get the list of the anonymous types for this variable\n *\n * @command Variable.getAnonymousTypes()\n *\n * @returns {List<Type>} - array of types\n *\n */\nVariable.prototype.getAnonymousTypes = function () {\n  return this.anonymousTypes;\n};\n\n\n/**\n * Get the type of this variable, return a list if it has more than one\n *\n * @command Variable.getType()\n *\n * @returns List<Type>} - array of types\n *\n */\nVariable.prototype.getType = function () {\n  var types = this.getTypes();\n  if (types.length == 1) {\n    return types[0];\n  } else {\n    return types;\n  }\n};\n\n// TODO: Matteo: Review before merging to development\n\nVariable.prototype.getValues = function () {\n  return this.values;\n};\n\nVariable.prototype.getValue = function () {\n  var values = this.getValues();\n  if (values.length == 1) {\n    return values[0];\n  } else {\n    return values;\n  }\n};\n\n/**\n * Get the list of values for this variable\n *\n * @command Variable.getInitialValues()\n *\n * @returns {List<Value>} - array of values\n *\n */\nVariable.prototype.getInitialValues = function () {\n  var pointerValue = this.pointerValue;\n  var values = this.getWrappedObj().initialValues;\n\n  if (values == undefined) {\n    values = [];\n  }\n\n  // if there is a pointer value just return that\n  if (pointerValue != undefined && pointerValue != null) {\n    values = [pointerValue];\n  }\n\n  return values;\n};\n\n/**\n * Get the initial value for this variable, or a list if more than one\n *\n * @command Variable.getInitialValue()\n *\n * @returns {Value} - array of values\n *\n */\nVariable.prototype.getInitialValue = function () {\n  var pointerValue = this.pointerValue;\n  var values = this.getWrappedObj().initialValues;\n\n  if (values == undefined) {\n    values = [];\n  }\n\n  // if there is a pointer value just return that\n  if (pointerValue != undefined && pointerValue != null) {\n    values = [pointerValue];\n  }\n\n  if (values.length == 1) {\n    return values[0];\n  } else {\n    return values;\n  }\n};\n\n/**\n * Check if the variable is static\n *\n * @command Variable.isStatic()\n *\n * @returns {bool} - Boolean\n *\n */\nVariable.prototype.isStatic = function () {\n  return this.getWrappedObj().static;\n};\n\n/**\n * Gets position for the variable\n *\n * @command Variable.isStatic()\n *\n * @returns {Object} - position for the variable\n *\n */\nVariable.prototype.getPosition = function () {\n  return this.getWrappedObj().position;\n};\n\n/**\n * Get combined children\n *\n * @command Variable.getChildren()\n *\n * @returns {List<Object>} - List of children\n *\n */\nVariable.prototype.getChildren = function () {\n  // only anonymousTypes as containment == true in the model (they are not references)\n  return this.anonymousTypes;\n};\n\n/**\n * Extends with methods from another object\n *\n * @command Variable.extendApi(extensionObj)\n */\nVariable.prototype.extendApi = function (extensionObj) {\n  extend(this, extensionObj);\n  this.capabilities.push(extensionObj.capabilityId);\n};\n\n/**\n * Checks if the instance has a given capability\n *\n * @command Variable.hasCapability(capabilityId)\n *\n * @returns {Boolean}\n */\nVariable.prototype.hasCapability = function (capabilityId) {\n  var hasCapability = false;\n  var capabilities = this.capabilities;\n\n  for (var i = 0; i < capabilities.length; i++) {\n    if (capabilities[i] === capabilityId) {\n      hasCapability = true;\n    }\n  }\n\n  return hasCapability;\n};\n\n/**\n * Get variable capabilities\n *\n * @returns {Array}\n */\nVariable.prototype.getCapabilities = function () {\n  return this.capabilities;\n};\n\n// Overriding set\nVariable.prototype.setTypes = function (types) {\n  this.types = types;\n  for (var i = 0; i < types.length; i++) {\n    if (types[i].addVariableReference != undefined) {\n      types[i].addVariableReference(this);\n    }\n  }\n  return this;\n};\n\n\n// Compatibility with new imports and old require syntax\nVariable.default = Variable;\nmodule.exports = Variable;\n\n"],"file":"Variable.js"}