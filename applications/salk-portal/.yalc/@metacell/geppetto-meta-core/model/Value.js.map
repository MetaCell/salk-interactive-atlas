{"version":3,"sources":["../../src/model/Value.js"],"names":["ObjectWrapper","require","extend","Value","options","pointerValue","capabilities","getObject","wrappedObj","rawValue","eClass","JSON","parse","json","getObjectForMetadata","value","key","obj","stringValueMap","console","error","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,MAA1C;AACA;AACA;AACA;AACA;AACA;;;IACMC,K;;;;;AAGJ,iBAAaC,OAAb,EAAsB;AAAA;;AAAA;;AACpB,8BAAMA,OAAN;AACA,UAAKC,YAAL,GAAoBD,OAAO,CAACC,YAA5B;AACA,UAAKC,YAAL,GAAoB,EAApB;AACAJ,IAAAA,MAAM,gCAAO,MAAKK,SAAL,CAAe,MAAKC,UAApB,CAAP,CAAN;AAJoB;AAKrB;;;;WAED,mBAAWC,QAAX,EAAqB;AACnB,cAAQA,QAAQ,CAACC,MAAjB;AACA,aAAK,MAAL;AACE,iBAAOC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,IAApB,CAAP;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACE,iBAAO,KAAKC,oBAAL,CAA0BL,QAAQ,CAACM,KAAnC,CAAP;;AACF,aAAK,kBAAL;AACE,qCAAUN,QAAQ,CAACO,GAAnB,EAAwB,KAAKT,SAAL,CAAeE,QAAQ,CAACM,KAAxB,CAAxB;;AACF,aAAK,gBAAL;AACE,iBAAO;AAAE,qBAAS,KAAKR,SAAL,CAAeE,QAAQ,CAACM,KAAxB;AAAX,WAAP;;AACF;AAAQ;AACN,gBAAIE,GAAG,qBAAQR,QAAR,CAAP;;AAEA,gBAAIQ,GAAG,CAACF,KAAJ,IAAaE,GAAG,CAACF,KAAJ,CAAUL,MAA3B,EAAmC;AACjCR,cAAAA,MAAM,CAACe,GAAD,EAAM,KAAKV,SAAL,CAAeU,GAAG,CAACF,KAAnB,CAAN,CAAN;AACD;;AACD,mBAAOE,GAAG,CAACP,MAAX;AACA,mBAAOO,GAAP;AACD;AAlBD,OADmB,CAuBnB;;AACD;;;WAGD,8BAAsBR,QAAtB,EAAgC;AAC9B,UAAIQ,GAAG,GAAG,EAAV;;AAD8B,iDAEHR,QAFG;AAAA;;AAAA;AAE9B,4DAAqC;AAAA,cAA5BS,cAA4B;;AACnC,cAAI,CAACA,cAAc,CAACH,KAApB,EAA2B;AACzBI,YAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCF,cAAxC;AACA;AACD;;AACDD,UAAAA,GAAG,CAACC,cAAc,CAACF,GAAhB,CAAH,GAA0B,KAAKT,SAAL,CAAeW,cAAc,CAACH,KAA9B,CAA1B;AACD;AAR6B;AAAA;AAAA;AAAA;AAAA;;AAS9B,aAAOE,GAAP;AACD;;;;EA/CiBjB,a,GAmDpB;;;AACAG,KAAK,WAAL,GAAgBA,KAAhB;AACAkB,MAAM,CAACC,OAAP,GAAiBnB,KAAjB","sourcesContent":["const ObjectWrapper = require('./ObjectWrapper');\nconst extend = require('../common/Utils').extend;\n/**\n * Client class use to represent a variable.\n *\n * @module model/Value\n */\nclass Value extends ObjectWrapper{\n\n\n  constructor (options) {\n    super(options);\n    this.pointerValue = options.pointerValue;\n    this.capabilities = [];\n    extend(this, this.getObject(this.wrappedObj));\n  }\n\n  getObject (rawValue) {\n    switch (rawValue.eClass) {\n    case 'JSON':\n      return JSON.parse(rawValue.json);\n    case 'Metadata':\n    case 'Composite':\n      return this.getObjectForMetadata(rawValue.value);\n    case 'StringToValueMap':\n      return { [rawValue.key]:this.getObject(rawValue.value) }\n    case 'TypeToValueMap':\n      return { 'value': this.getObject(rawValue.value) }\n    default:{\n      let obj = { ...rawValue };\n\n      if (obj.value && obj.value.eClass) {\n        extend(obj, this.getObject(obj.value));\n      }\n      delete obj.eClass;\n      return obj;\n    }\n\n    }\n\n    // TODO handle other value types\n  }\n\n\n  getObjectForMetadata (rawValue) {\n    let obj = {}\n    for (let stringValueMap of rawValue) {\n      if (!stringValueMap.value) {\n        console.error('Malformed object value', stringValueMap);\n        continue;\n      }\n      obj[stringValueMap.key] = this.getObject(stringValueMap.value);\n    }\n    return obj;\n  }\n\n}\n\n// Compatibility with new imports and old require syntax\nValue.default = Value;\nmodule.exports = Value;\n"],"file":"Value.js"}