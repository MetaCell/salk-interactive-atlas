{"version":3,"sources":["../../src/model/Instance.js"],"names":["Instance","options","id","name","_metaType","variable","parent","children","undefined","capabilities","connections","getVariable","getTypes","getValues","types","length","getValue","getPosition","hasVisual","i","getMetaType","Resources","ARRAY_TYPE_NODE","getType","VISUAL_TYPE_NODE","COMPOSITE_VISUAL_TYPE_NODE","getVisualType","visualTypes","push","useType","parentPath","getInstancePath","path","getId","replace","child","extensionObj","capabilityId","hasCapability","direction","ModelFactory","updateConnectionInstances","INPUT","OUTPUT","INPUT_OUTPUT","filteredConnections","connectivity","getInitialValue","value","DIRECTIONAL","a","getA","b","getB","getPath","BIDIRECTIONAL","connection","concat","getChildren","c","deleteInstance"],"mappings":"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","sourcesContent":["import { extend } from '../common/Utils';\nimport ModelFactory from '../ModelFactory';\nimport Resources from '../Resources';\n\n/**\n * Client class use to represent an instance object (instantiation of a variable).\n *\n * @module model/Instance\n * @author Giovanni Idili\n * @author Matteo Cantarelli\n */\n\nclass Instance {\n\n  constructor (options) {\n    this.id = options.id;\n    this.name = options.name;\n    this._metaType = options._metaType;\n    this.variable = options.variable;\n    this.parent = options.parent;\n    this.children = (options.children != undefined) ? options.children : [];\n    this.capabilities = [];\n    this.connections = [];\n  }\n\n\n  /**\n   * Get id\n   *\n   * @command Instance.getId()\n   *\n   * @returns {String} - Id\n   *\n   */\n  getId () {\n    return this.id;\n  }\n\n  /**\n   * Get name\n   *\n   * @command Instance.getName()\n   *\n   * @returns {String} - Name\n   *\n   */\n  getName () {\n    return this.name;\n  }\n\n  /**\n   * Get meta type\n   *\n   * @command Instance.getMetaType()\n   *\n   * @returns {String} - meta type\n   *\n   */\n  getMetaType () {\n    return this._metaType;\n  }\n\n  /**\n   * Get the type for this instance\n   *\n   * @command Instance.getTypes()\n   *\n   * @returns {List<Type>} - array of types\n   *\n   */\n  getTypes () {\n    return this.getVariable().getTypes();\n  }\n\n  getValues () {\n    return this.getVariable().getValues();\n  }\n  /**\n   * Get the type of this variable, return a list if it has more than one\n   *\n   * @command Variable.getType()\n   *\n   * @returns List<Type>} - array of types\n   *\n   */\n  getType () {\n    var types = this.variable.getTypes();\n    if (types.length == 1) {\n      return types[0];\n    } else {\n      return types;\n    }\n  }\n\n  getValue () {\n    return this.getVariable().getValue();\n  }\n  /**\n   *\n   * @returns {*|Object}\n   */\n  getPosition () {\n    return this.getVariable().getPosition();\n  }\n\n  /**\n   * Checks if this instance has a visual type\n   *\n   * @command Instance.hasVisualType()\n   *\n   * @returns {Boolean}\n   *\n   */\n  hasVisualType () {\n    var hasVisual = false;\n    var types = this.getTypes();\n\n    // check if any of types is VISUAL_TYPE_NODE or if types HAVE .visualType\n    for (var i = 0; i < types.length; i++) {\n      // could be pointing to an array variable if it's an exploded instance\n      if (types[i].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n        // check it if is a visual type or has a visual type\n        if (types[i].getType().getMetaType() == Resources.VISUAL_TYPE_NODE\n                        || types[i].getType().getMetaType() == Resources.COMPOSITE_VISUAL_TYPE_NODE\n                        || (types[i].getType().getVisualType() != null)) {\n          hasVisual = true;\n          break;\n        }\n      } else if (types[i].getMetaType() == Resources.VISUAL_TYPE_NODE\n                    || types[i].getMetaType() == Resources.COMPOSITE_VISUAL_TYPE_NODE\n                    || types[i].getVisualType() != null) {\n        hasVisual = true;\n        break;\n      }\n    }\n\n    return hasVisual;\n  }\n\n  /**\n   * Gets visual types for the instance if any\n   *\n   * @command Instance.getVisualType()\n   *\n   * @returns {*} - Type or list of Types if more than one is found\n   */\n  getVisualType () {\n    var visualTypes = [];\n\n    var types = this.getTypes();\n    // check if any of types is VISUAL_TYPE_NODE or if types HAVE .visualType\n    for (var i = 0; i < types.length; i++) {\n      // could be pointing to an array variable if it's an exploded instance\n      if (types[i].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n        // check it if is a visual type or has a visual type\n        if (types[i].getType().getMetaType() == Resources.VISUAL_TYPE_NODE || types[i].getType().getMetaType() == Resources.COMPOSITE_VISUAL_TYPE_NODE) {\n          visualTypes.push(types[i].getType());\n        } else if (types[i].getType().getVisualType() != null) {\n          visualTypes.push(types[i].getType().getVisualType());\n        }\n      } else {\n        // check it if is a visual type or has a visual type\n        if (types[i].getMetaType() == Resources.VISUAL_TYPE_NODE || types[i].getMetaType() == Resources.COMPOSITE_VISUAL_TYPE_NODE) {\n          visualTypes.push(types[i]);\n        } else if (types[i].getVisualType() != null) {\n          visualTypes.push(types[i].getVisualType());\n        }\n      }\n    }\n\n    if (visualTypes.length == 0) {\n      return undefined;\n    } else if (visualTypes.length == 1) {\n      return visualTypes[0];\n    } else {\n      return visualTypes;\n    }\n  }\n\n\n  /**\n   * Get the variable for this instance\n   *\n   * @command Instance.getVariable()\n   *\n   * @returns {Variable} - Variable object for this instance\n   *\n   */\n  getVariable () {\n    return this.variable;\n  }\n\n  /**\n   * Get children instances\n   *\n   * @command Instance.getChildren()\n   *\n   * @returns {List<Instance>} - List of instances\n   *\n   */\n  getChildren () {\n    return this.children;\n  }\n\n  /**\n   * Get instance path\n   *\n   * @command Instance.getInstancePath()\n   *\n   * @returns {String} - Instance path\n   *\n   */\n  getInstancePath (useType) {\n    if (useType == undefined){\n      useType = false;\n    }\n\n    var parent = this.parent;\n    var parentPath = \"\";\n\n    if (parent != null && parent != undefined) {\n      parentPath = parent.getInstancePath(useType);\n    }\n    var path = parentPath + \".\" + this.getId();\n\n    if (useType){\n      path += \"(\" + this.getType().getId() + \")\";\n    }\n\n    return (parentPath != \"\") ? path : path.replace('.','');\n  }\n\n  /**\n   * Synonym of get instance path\n   *\n   * @command Instance.getPath()\n   *\n   * @returns {String} - Instance path\n   *\n   */\n  getPath () {\n    return this.getInstancePath();\n  }\n\n  /**\n   * Get raw instance path (without array shortening)\n   *\n   * @command Instance.getRawInstancePath()\n   *\n   * @returns {String} - Instance path\n   *\n   */\n  getRawInstancePath () {\n    var parent = this.parent;\n    var parentPath = \"\";\n\n    if (parent != null && parent != undefined) {\n      parentPath = parent.getInstancePath();\n    }\n\n    return (parentPath != \"\") ? (parentPath + \".\" + this.getId()) : this.getId();\n  }\n\n\n  /**\n   * Get parent\n   *\n   * @command Instance.getParent()\n   *\n   * @returns {Instance} - Parent instance\n   *\n   */\n  getParent () {\n    return this.parent;\n  }\n\n  /**\n   * Get children instances\n   *\n   * @command Instance.addChild()\n   */\n  addChild (child) {\n    this.children.push(child);\n  }\n\n  /**\n   * Extends with methods from another object\n   *\n   * @command Instance.extendApi(extensionObj)\n   */\n  extendApi (extensionObj) {\n    extend(this, extensionObj);\n    this.capabilities.push(extensionObj.capabilityId);\n  }\n\n  /**\n   * Checks if the instance has a given capability\n   *\n   * @command Instance.hasCapability(capabilityId)\n   *\n   * @returns {Boolean}\n   */\n  hasCapability (capabilityId) {\n    var hasCapability = false;\n    var capabilities = this.capabilities;\n\n    for (var i = 0; i < capabilities.length; i++) {\n      if (capabilities[i] === capabilityId) {\n        hasCapability = true;\n      }\n    }\n\n    return hasCapability;\n  }\n\n  /**\n   * Get instance capabilities\n   *\n   * @returns {Array}\n   */\n  getCapabilities () {\n    return this.capabilities;\n  }\n\n  /**\n   * Return connections, user Resources.INPUT / OUTPUT / INPUT_OUTPUT to filter\n   *\n   * @command Instance.getConnections(direction)\n   *\n   * @returns {List<Instance>}\n   *\n   */\n  getConnections (direction) {\n\n    ModelFactory.updateConnectionInstances(this);\n\n    var connections = this.connections;\n\n    if (direction === Resources.INPUT || direction === Resources.OUTPUT || direction === Resources.INPUT_OUTPUT) {\n      var filteredConnections = [];\n      for (var i = 0; i < connections.length; i++) {\n        // get directionality\n        var connectivity = connections[i].getVariable().getInitialValue().value.connectivity;\n        if (connectivity == Resources.DIRECTIONAL) {\n          var a = connections[i].getA();\n          var b = connections[i].getB();\n          // if A is this then it's an output connection\n          if (this.getInstancePath() == a.getPath() && direction === Resources.OUTPUT) {\n            filteredConnections.push(connections[i]);\n          }\n          // if B is this then it's an input connection\n          if (this.getInstancePath() == b.getPath() && direction === Resources.INPUT) {\n            filteredConnections.push(connections[i]);\n          }\n        } else if (connectivity == Resources.BIDIRECTIONAL) {\n          filteredConnections.push(connections[i]);\n        }\n      }\n\n      // set return variable to filtered list\n      connections = filteredConnections;\n    }\n\n    return connections;\n  }\n\n  /**\n   * Get children instances\n   *\n   * @command Instance.addConnection()\n   */\n  addConnection (connection) {\n    this.connections.push(connection);\n  }\n\n  /**\n   * Deletes instance\n   */\n  delete () {\n    var children = [].concat(this.getChildren());\n    for (var c = 0; c < children.length; c++) {\n      children[c].delete();\n    }\n\n    ModelFactory.deleteInstance(this);\n  }\n\n}\n\nexport default Instance;\n"],"file":"Instance.js"}