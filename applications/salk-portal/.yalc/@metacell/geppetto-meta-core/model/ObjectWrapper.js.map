{"version":3,"sources":["../../src/model/ObjectWrapper.js"],"names":["ObjectWrapper","options","wrappedObj","parent","prototype","constructor","getName","name","getId","id","getWrappedObj","getMetaType","eClass","getParent","setParent","getPath","module","exports"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,aAAT,CAAwBC,OAAxB,EAAiC;AAE/B,OAAKC,UAAL,GAAkBD,OAAO,CAACC,UAA1B;AACA,OAAKC,MAAL,GAAcF,OAAO,CAACE,MAAtB;AACD;;AAEDH,aAAa,CAACI,SAAd,GAA0B;AAExBC,EAAAA,WAAW,EAAEL,aAFW;;AAKxB;AACF;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,OAAO,EAAE,mBAAY;AACnB,WAAO,KAAKJ,UAAL,CAAgBK,IAAvB;AACD,GAduB;;AAgBxB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,EAAE,iBAAY;AACjB,WAAO,KAAKN,UAAL,CAAgBO,EAAvB;AACD,GAxBuB;;AA0BxB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,aAAa,EAAE,yBAAY;AACzB,WAAO,KAAKR,UAAZ;AACD,GAlCuB;;AAoCxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACES,EAAAA,WAAW,EAAE,uBAAY;AACvB,WAAO,KAAKT,UAAL,CAAgBU,MAAvB;AACD,GA9CuB;;AAgDxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE,qBAAY;AACrB,WAAO,KAAKV,MAAZ;AACD,GA1DuB;;AA4DxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEW,EAAAA,SAAS,EAAE,mBAAUX,MAAV,EAAkB;AAC3B,SAAKA,MAAL,GAAcA,MAAd;AACA,WAAO,IAAP;AACD,GAvEuB;;AAyExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEY,EAAAA,OAAO,EAAE,mBAAY;AACnB,QAAI,KAAKZ,MAAT,EAAiB;AACf,aAAO,KAAKA,MAAL,CAAYY,OAAZ,KAAwB,GAAxB,GAA8B,KAAKP,KAAL,EAArC;AACD,KAFD,MAEO;AACL,aAAO,KAAKA,KAAL,EAAP;AACD;AAEF;AAxFuB,CAA1B,C,CA2FA;;AACAR,aAAa,WAAb,GAAwBA,aAAxB;AACAgB,MAAM,CAACC,OAAP,GAAiBjB,aAAjB","sourcesContent":["/**\n * Base class that provides wrapping functionality for a generic underlying object (with id and name).\n *\n * @module model/ObjectWrapper\n * @author Giovanni Idili\n */\n\n\nfunction ObjectWrapper (options) {\n\n  this.wrappedObj = options.wrappedObj;\n  this.parent = options.parent;\n}\n\nObjectWrapper.prototype = {\n\n  constructor: ObjectWrapper,\n\n\n  /**\n   * Gets the name of the node\n   *\n   * @command Node.getName()\n   * @returns {String} Name of the node\n   *\n   */\n  getName: function () {\n    return this.wrappedObj.name;\n  },\n\n  /**\n   * Get the id associated with node\n   *\n   * @command Node.getId()\n   * @returns {String} ID of node\n   */\n  getId: function () {\n    return this.wrappedObj.id;\n  },\n\n  /**\n   * Get the wrapped obj\n   *\n   * @command Node.getWrappedObj()\n   * @returns {Object} - Wrapped object\n   */\n  getWrappedObj: function () {\n    return this.wrappedObj;\n  },\n\n  /**\n   * Get meta type\n   *\n   * @command Instance.getMetaType()\n   *\n   * @returns {String} - meta type\n   *\n   */\n  getMetaType: function () {\n    return this.wrappedObj.eClass;\n  },\n\n  /**\n   * Get parent\n   *\n   * @command Type.getParent()\n   *\n   * @returns {Object} - Parent object\n   *\n   */\n  getParent: function () {\n    return this.parent;\n  },\n\n  /**\n   * Set parent\n   *\n   * @command Type.setParent()\n   *\n   * @returns {Object} - Current object\n   *\n   */\n  setParent: function (parent) {\n    this.parent = parent;\n    return this;\n  },\n\n  /**\n   * Get path\n   *\n   * @command Type.getPath()\n   *\n   * @returns {String} - path\n   *\n   */\n  getPath: function () {\n    if (this.parent) {\n      return this.parent.getPath() + \".\" + this.getId();\n    } else {\n      return this.getId();\n    }\n\n  }\n};\n\n// Compatibility with new imports and old require syntax\nObjectWrapper.default = ObjectWrapper;\nmodule.exports = ObjectWrapper;\n"],"file":"ObjectWrapper.js"}