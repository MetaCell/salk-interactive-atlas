{"version":3,"sources":["../../src/model/GeppettoModel.js"],"names":["GeppettoModel","options","ObjectWrapper","prototype","constructor","call","variables","undefined","libraries","datasources","queries","worlds","currentWorldIdx","wrappedObj","length","Object","create","getVariables","legacy","getCurrentWorld","addToVariables","variablesToAdd","push","apply","setVariables","getAllVariables","concat","getId","Resources","MODEL_PREFIX_CLIENT","getLibraries","getDatasources","getQueries","getChildren","getWorlds","activateWorld","worldOrIndex","findIndex","world","id","console","error"],"mappings":";;;;;;;;AAQA;;AACA;;;;AAPA;AACA;AACA;AACA;AACA;AACA;AAKO,SAASA,aAAT,CAAwBC,OAAxB,EAAiC;AACtCC,4BAAcC,SAAd,CAAwBC,WAAxB,CAAoCC,IAApC,CAAyC,IAAzC,EAA+CJ,OAA/C;;AACA,OAAKK,SAAL,GAAkBL,OAAO,CAACK,SAAR,IAAqBC,SAAtB,GAAmCN,OAAO,CAACK,SAA3C,GAAuD,EAAxE;AACA,OAAKE,SAAL,GAAkBP,OAAO,CAACO,SAAR,IAAqBD,SAAtB,GAAmCN,OAAO,CAACO,SAA3C,GAAuD,EAAxE;AACA,OAAKC,WAAL,GAAoBR,OAAO,CAACQ,WAAR,IAAuBF,SAAxB,GAAqCN,OAAO,CAACQ,WAA7C,GAA2D,EAA9E;AACA,OAAKC,OAAL,GAAgBT,OAAO,CAACS,OAAR,IAAmBH,SAApB,GAAiCN,OAAO,CAACS,OAAzC,GAAmD,EAAlE;AACA,OAAKC,MAAL,GAAcV,OAAO,CAACU,MAAR,IAAkBJ,SAAlB,GAA8BN,OAAO,CAACU,MAAtC,GAA+C,EAA7D;AACA,OAAKC,eAAL,GAAuB,KAAKC,UAAL,CAAgBF,MAAhB,IAA0B,KAAKE,UAAL,CAAgBF,MAAhB,CAAuBG,MAAjD,GAA0D,CAA1D,GAA8D,CAAC,CAAtF;AACD;;AAEDd,aAAa,CAACG,SAAd,GAA0BY,MAAM,CAACC,MAAP,CAAcd,0BAAcC,SAA5B,CAA1B;AACAH,aAAa,CAACG,SAAd,CAAwBC,WAAxB,GAAsCJ,aAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,aAAa,CAACG,SAAd,CAAwBc,YAAxB,GAAuC,UAAUC,MAAV,EAAkB;AACvD,MAAI,KAAKN,eAAL,IAAwB,CAAxB,IAA6B,CAACM,MAAlC,EAA0C;AACxC,WAAO,KAAKC,eAAL,GAAuBF,YAAvB,EAAP;AACD;;AACD,SAAO,KAAKX,SAAZ;AACD,CALD;;AAOAN,aAAa,CAACG,SAAd,CAAwBiB,cAAxB,GAAyC,UAAUC,cAAV,EAA0B;AACjE,MAAIf,SAAS,GAAG,KAAKW,YAAL,EAAhB;AACAX,EAAAA,SAAS,CAACgB,IAAV,CAAeC,KAAf,CAAqBjB,SAArB,EAAgCe,cAAhC;AACD,CAHD;;AAKArB,aAAa,CAACG,SAAd,CAAwBqB,YAAxB,GAAuC,UAAUlB,SAAV,EAAqB;AAC1D,MAAI,KAAKM,eAAL,IAAwB,CAA5B,EAA+B;AAC7B,SAAKO,eAAL,GAAuBK,YAAvB,CAAoClB,SAApC;AACD,GAFD,MAEO;AACL,SAAKA,SAAL,GAAiBA,SAAjB;AACD;AACF,CAND;;AAQAN,aAAa,CAACG,SAAd,CAAwBsB,eAAxB,GAA0C,YAAY;AACpD,MAAI,KAAKb,eAAL,IAAwB,CAA5B,EAA+B;AAC7B,WAAO,KAAKO,eAAL,GAAuBF,YAAvB,GAAsCS,MAAtC,CAA6C,KAAKpB,SAAlD,CAAP;AACD;;AACD,SAAO,KAAKA,SAAZ;AACD,CALD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,aAAa,CAACG,SAAd,CAAwBwB,KAAxB,GAAgC,YAAY;AAC1C,SAAOC,sBAAUC,mBAAjB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7B,aAAa,CAACG,SAAd,CAAwB2B,YAAxB,GAAuC,YAAY;AACjD,SAAO,KAAKtB,SAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,aAAa,CAACG,SAAd,CAAwB4B,cAAxB,GAAyC,YAAY;AACnD,SAAO,KAAKtB,WAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,aAAa,CAACG,SAAd,CAAwB6B,UAAxB,GAAqC,YAAY;AAC/C,SAAO,KAAKtB,OAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,aAAa,CAACG,SAAd,CAAwB8B,WAAxB,GAAsC,YAAY;AAChD,SAAO,KAAK3B,SAAL,CAAeoB,MAAf,CAAsB,KAAKlB,SAA3B,EAAsC,KAAKC,WAA3C,EAAwD,KAAKC,OAA7D,EAAsE,KAAKC,MAA3E,CAAP;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAX,aAAa,CAACG,SAAd,CAAwBgB,eAAxB,GAA0C,YAAY;AACpD,SAAO,KAAKR,MAAL,CAAY,KAAKC,eAAjB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAZ,aAAa,CAACG,SAAd,CAAwB+B,SAAxB,GAAoC,YAAY;AAC9C,SAAO,KAAKvB,MAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAX,aAAa,CAACG,SAAd,CAAwBgC,aAAxB,GAAwC,UAAUC,YAAV,EAAwB;AAC9D,MAAI,OAAOA,YAAP,IAAuB,QAA3B,EAAqC;AACnC,SAAKxB,eAAL,GAAuBwB,YAAvB;AACD,GAFD,MAEO,IAAI,OAAOA,YAAP,IAAuB,QAA3B,EAAoC;AACzC,SAAKxB,eAAL,GAAuB,KAAKD,MAAL,CAAY0B,SAAZ,CAAsB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACC,EAAN,IAAYH,YAAhB;AAAA,KAA3B,CAAvB;AACD;;AACD,OAAKxB,eAAL,GAAuB,KAAKD,MAAL,CAAY0B,SAAZ,CAAsB,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,EAAN,IAAYH,YAAY,CAACG,EAA7B;AAAA,GAA3B,CAAvB;;AACA,MAAI,KAAK5B,MAAL,CAAY,KAAKC,eAAjB,MAAsCL,SAA1C,EAAqD;AACnDiC,IAAAA,OAAO,CAACC,KAAR,CAAcL,YAAd,EAA4B,0BAA5B;AACA,UAAM,0BAAN;AACD;AACF,CAXD;;eAaepC,a","sourcesContent":["\n\n/**\n * Client class use to represent top level Geppetto model.\n *\n * @module model/GeppettoModel\n * @author Giovanni Idili\n */\nimport Resources from '../Resources';\nimport ObjectWrapper from './ObjectWrapper';\n\n\nexport function GeppettoModel (options) {\n  ObjectWrapper.prototype.constructor.call(this, options);\n  this.variables = (options.variables != undefined) ? options.variables : [];\n  this.libraries = (options.libraries != undefined) ? options.libraries : [];\n  this.datasources = (options.datasources != undefined) ? options.datasources : [];\n  this.queries = (options.queries != undefined) ? options.queries : [];\n  this.worlds = options.worlds != undefined ? options.worlds : [];\n  this.currentWorldIdx = this.wrappedObj.worlds && this.wrappedObj.worlds.length ? 0 : -1;\n}\n\nGeppettoModel.prototype = Object.create(ObjectWrapper.prototype);\nGeppettoModel.prototype.constructor = GeppettoModel;\n\n/**\n * Get variables\n *\n * @command GeppettoModel.getVariables()\n *\n * @returns {List<Variable>} - List of Variable objects\n *\n */\nGeppettoModel.prototype.getVariables = function (legacy) {\n  if (this.currentWorldIdx >= 0 && !legacy) {\n    return this.getCurrentWorld().getVariables();\n  }\n  return this.variables;\n};\n\nGeppettoModel.prototype.addToVariables = function (variablesToAdd) {\n  let variables = this.getVariables();\n  variables.push.apply(variables, variablesToAdd);\n};\n\nGeppettoModel.prototype.setVariables = function (variables) {\n  if (this.currentWorldIdx >= 0) {\n    this.getCurrentWorld().setVariables(variables);\n  } else {\n    this.variables = variables;\n  }\n};\n\nGeppettoModel.prototype.getAllVariables = function () {\n  if (this.currentWorldIdx >= 0) {\n    return this.getCurrentWorld().getVariables().concat(this.variables);\n  }\n  return this.variables;\n};\n\n    \n/**\n * Get the id\n *\n * @command GeppettoModel.getId()\n *\n * @returns {String} - The id of the model, a constant\n *\n */\nGeppettoModel.prototype.getId = function () {\n  return Resources.MODEL_PREFIX_CLIENT;\n};\n\n/**\n * Get libraries\n *\n * @command GeppettoModel.getLibraries()\n *\n * @returns {List<Library>} - List of library objects\n *\n */\nGeppettoModel.prototype.getLibraries = function () {\n  return this.libraries;\n};\n\n/**\n * Get datasources\n *\n * @command GeppettoModel.getDatasources()\n *\n * @returns {List<Datasource>} - List of datasource objects\n *\n */\nGeppettoModel.prototype.getDatasources = function () {\n  return this.datasources;\n};\n\n/**\n * Get top level queries\n *\n * @command GeppettoModel.getQueries()\n *\n * @returns {List<Query>} - List of query objects\n *\n */\nGeppettoModel.prototype.getQueries = function () {\n  return this.queries;\n};\n\n/**\n * Get combined list of all children\n *\n * @command GeppettoModel.getChildren()\n *\n * @returns {List<Object>} - List of children\n *\n */\nGeppettoModel.prototype.getChildren = function () {\n  return this.variables.concat(this.libraries, this.datasources, this.queries, this.worlds);\n};\n\n\n/**\n * Get the default selected world\n *\n */\nGeppettoModel.prototype.getCurrentWorld = function () {\n  return this.worlds[this.currentWorldIdx];\n};\n\n/**\n * Get worlds\n *\n */\nGeppettoModel.prototype.getWorlds = function () {\n  return this.worlds;\n};\n\n/**\n * Set the default selected world\n *\n */\nGeppettoModel.prototype.activateWorld = function (worldOrIndex) {\n  if (typeof worldOrIndex == 'number') {\n    this.currentWorldIdx = worldOrIndex;\n  } else if (typeof worldOrIndex == 'string'){\n    this.currentWorldIdx = this.worlds.findIndex(world => world.id == worldOrIndex);\n  }\n  this.currentWorldIdx = this.worlds.findIndex(world => world.id == worldOrIndex.id);\n  if (this.worlds[this.currentWorldIdx] === undefined) {\n    console.error(worldOrIndex, \"world not found in model\");\n    throw \"World not found in model\";\n  }\n};\n\nexport default GeppettoModel;\n"],"file":"GeppettoModel.js"}