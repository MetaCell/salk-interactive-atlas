{"version":3,"sources":["../../src/model/SimulatorConfiguration.js"],"names":["define","require","Node","Model","extend","simulatorId","conversionId","aspectInstancePath","timeStep","length","parameters","initialize","options","id","_metaType","getParameters","getSimulatorParameter","parameter","setSimulatorParameter","value","properties","setParameters","getSimulator","getConversionService","setConversionService","conversionServiceId","setSimulator","getTimeStep","setTimeStep","parseFloat","getLength","setLength","print","name","instancePath"],"mappings":"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","sourcesContent":["\n\n/**\n * Client class for Simulator Configurator; stores time step, simualtor id\n * and parameters.\n *\n * @module model/SimulatorConfiguration\n * @author Jesus R. Martinez (jesus@metacell.us)\n */\ndefine(function (require) {\n\n  var Node = require('./Node');\n\n  return Node.Model.extend({\n    simulatorId: \"\",\n    conversionId: \"\",\n    aspectInstancePath: \"\",\n    timeStep: null,\n    length: null,\n    parameters: null,\n\n    /**\n     * Stores simulator configuration values\n     *\n     * @param {Object} options - Object with options attributes to initialize\n     *                           node\n     */\n    initialize: function (options) {\n      // initialize parameters array\n      this.parameters = options.parameters;\n      this.id = options.id;\n      this.simulatorId = options.simulatorId;\n      this.aspectInstancePath = options.aspectInstancePath;\n      this.conversionId = options.conversionId;\n      this.timeStep = options.timeStep;\n      this.length = options.length;\n      this._metaType = options._metaType;\n    },\n\n    /**\n     * Get parameters for this Simulator Configuration\n     *\n     * @command SimulatorConfig.getParameters()\n     * @returns {Array} Array of parameters\n     */\n    getParameters: function () {\n      return this.parameters;\n    },\n\n    /**\n     * Get parameter for this Simulator Configuration\n     *\n     * @command SimulatorConfig.getSimulatorParameter()\n     * @returns {Array} Array of parameters\n     */\n    getSimulatorParameter: function (parameter) {\n      return this.parameters[parameter];\n    },\n\n    /**\n     * Sets the simulatorId for this Simulator Configuration\n     *\n     * @command SimulatorConfig.setsimulatorId(simulatorId)\n     */\n    setSimulatorParameter: function (parameter, value) {\n      var properties = {};\n      properties[\"aspectInstancePath\"] = this.aspectInstancePath;\n      properties[\"SP$\" + parameter] = value;\n      return this.parameters[parameter] = value;\n    },\n\n    /**\n     * Gets an experiment from this project.\n     *\n     * @deprecated related to experiment?\n     * @command SimulatorConfig.setParameters(parameters)\n     */\n    setParameters: function (parameters) {\n      return this.parameters = parameters;\n    },\n\n    /**\n     * Gets the simulator id for this Simulator Configuration\n     *\n     * @command SimulatorConfig.getsimulatorId()\n     * @returns {String} simulatorId string\n     */\n    getSimulator: function () {\n      return this.simulatorId;\n    },\n\n    /**\n     * Gets the conversion service for this Simulator Configuration\n     *\n     * @command SimulatorConfig.getsimulatorId()\n     * @returns {String} simulatorId string\n     */\n    getConversionService: function () {\n      return this.conversionId;\n    },\n\n    /**\n     * Sets the simulatorId for this Simulator Configuration\n     *\n     * @command SimulatorConfig.setsimulatorId(simulatorId)\n     */\n    setConversionService: function (conversionServiceId) {\n      var properties = {};\n      properties[\"conversionServiceId\"] = conversionServiceId;\n      properties[\"aspectInstancePath\"] = this.aspectInstancePath;\n      return this.conversionId = conversionServiceId;\n    },\n\n    /**\n     * Sets the simulatorId for this Simulator Configuration\n     *\n     * @command SimulatorConfig.setsimulatorId(simulatorId)\n     */\n    setSimulator: function (simulatorId) {\n      var properties = {};\n      properties[\"simulatorId\"] = simulatorId;\n      properties[\"aspectInstancePath\"] = this.aspectInstancePath;\n      return this.simulatorId = simulatorId;\n    },\n\n    /**\n     * Get time step for this Simulator Configuration\n     *\n     * @command SimulatorConfig.getTimeStep()\n     * @returns {String} String value of timestep\n     */\n    getTimeStep: function () {\n      return this.timeStep;\n    },\n\n    /**\n     * Sets the time step for the simulator configuration\n     *\n     * @command SimulatorConfig.setTimeStep(timeStep)\n     */\n    setTimeStep: function (timeStep) {\n      var properties = {};\n      if (typeof timeStep === 'string') {\n        timeStep = parseFloat(timeStep);\n      }\n      properties[\"timeStep\"] = timeStep;\n      properties[\"aspectInstancePath\"] = this.aspectInstancePath;\n      return this.timeStep = timeStep;\n    },\n\n    /**\n     * Get simulation length for this Simulator Configuration\n     *\n     * @command SimulatorConfig.getLength()\n     * @returns {String} String value of simulation length\n     */\n    getLength: function () {\n      return this.length;\n    },\n\n    /**\n     * Sets the length for the simulator configuration\n     *\n     * @command SimulatorConfig.setLength(length)\n     */\n    setLength: function (length) {\n      var properties = {};\n      if (typeof length === 'string') {\n        length = parseFloat(length);\n      }\n      properties[\"length\"] = length;\n      properties[\"aspectInstancePath\"] = this.aspectInstancePath;\n      return this.length = length;\n    },\n\n    /**\n     * Print out formatted node\n     */\n    print: function () {\n      return \"Name : \" + this.name + \"\\n\" + \"    Id: \" + this.id + \"\\n\"\n                + \"    InstancePath : \" + this.instancePath + \"\\n\"\n                + \"    simulatorId : \" + this.simulatorId + \"\\n\";\n    }\n  });\n});\n"],"file":"SimulatorConfiguration.js"}