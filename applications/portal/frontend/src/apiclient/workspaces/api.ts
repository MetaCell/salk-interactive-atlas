/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Collaborator
 */
export interface Collaborator {
    /**
     * 
     * @type {number}
     * @memberof Collaborator
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Collaborator
     */
    'role'?: CollaboratorRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof Collaborator
     */
    'shared_on'?: string;
    /**
     * 
     * @type {number}
     * @memberof Collaborator
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof Collaborator
     */
    'experiment': number;
}

export const CollaboratorRoleEnum = {
    V: 'v',
    E: 'e'
} as const;

export type CollaboratorRoleEnum = typeof CollaboratorRoleEnum[keyof typeof CollaboratorRoleEnum];

/**
 * 
 * @export
 * @interface DownloadPopulations
 */
export interface DownloadPopulations {
    /**
     * 
     * @type {Array<number>}
     * @memberof DownloadPopulations
     */
    'active_populations': Array<number>;
}
/**
 * 
 * @export
 * @interface Experiment
 */
export interface Experiment {
    /**
     * 
     * @type {number}
     * @memberof Experiment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Experiment
     */
    'is_private'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    'date_created'?: string;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    'last_modified'?: string;
    /**
     * 
     * @type {ExperimentOwner}
     * @memberof Experiment
     */
    'owner'?: ExperimentOwner;
    /**
     * 
     * @type {Array<ExperimentOwnerGroupsInner>}
     * @memberof Experiment
     */
    'teams'?: Array<ExperimentOwnerGroupsInner>;
    /**
     * 
     * @type {Array<ExperimentCollaboratorsInner>}
     * @memberof Experiment
     */
    'collaborators'?: Array<ExperimentCollaboratorsInner>;
    /**
     * 
     * @type {Array<ExperimentPopulationsInner>}
     * @memberof Experiment
     */
    'populations'?: Array<ExperimentPopulationsInner>;
    /**
     * 
     * @type {Array<ExperimentTagsInner>}
     * @memberof Experiment
     */
    'tags'?: Array<ExperimentTagsInner>;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    'has_edit_permission'?: string;
}
/**
 * 
 * @export
 * @interface ExperimentCollaboratorsInner
 */
export interface ExperimentCollaboratorsInner {
    /**
     * 
     * @type {number}
     * @memberof ExperimentCollaboratorsInner
     */
    'id'?: number;
    /**
     * 
     * @type {ExperimentCollaboratorsInnerUser}
     * @memberof ExperimentCollaboratorsInner
     */
    'user': ExperimentCollaboratorsInnerUser;
    /**
     * 
     * @type {string}
     * @memberof ExperimentCollaboratorsInner
     */
    'shared_on'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentCollaboratorsInner
     */
    'role'?: ExperimentCollaboratorsInnerRoleEnum;
}

export const ExperimentCollaboratorsInnerRoleEnum = {
    V: 'v',
    E: 'e'
} as const;

export type ExperimentCollaboratorsInnerRoleEnum = typeof ExperimentCollaboratorsInnerRoleEnum[keyof typeof ExperimentCollaboratorsInnerRoleEnum];

/**
 * 
 * @export
 * @interface ExperimentCollaboratorsInnerUser
 */
export interface ExperimentCollaboratorsInnerUser {
    /**
     * 
     * @type {number}
     * @memberof ExperimentCollaboratorsInnerUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentCollaboratorsInnerUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentCollaboratorsInnerUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentCollaboratorsInnerUser
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ExperimentOwner
 */
export interface ExperimentOwner {
    /**
     * 
     * @type {number}
     * @memberof ExperimentOwner
     */
    'id'?: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof ExperimentOwner
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentOwner
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentOwner
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentOwner
     */
    'email'?: string;
    /**
     * 
     * @type {Array<ExperimentOwnerGroupsInner>}
     * @memberof ExperimentOwner
     */
    'groups'?: Array<ExperimentOwnerGroupsInner>;
    /**
     * 
     * @type {string}
     * @memberof ExperimentOwner
     */
    'avatar': string;
}
/**
 * 
 * @export
 * @interface ExperimentOwnerGroupsInner
 */
export interface ExperimentOwnerGroupsInner {
    /**
     * 
     * @type {number}
     * @memberof ExperimentOwnerGroupsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentOwnerGroupsInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ExperimentPairFileUpload
 */
export interface ExperimentPairFileUpload {
    /**
     * 
     * @type {File}
     * @memberof ExperimentPairFileUpload
     */
    'key_file': File;
    /**
     * 
     * @type {File}
     * @memberof ExperimentPairFileUpload
     */
    'data_file': File;
}
/**
 * 
 * @export
 * @interface ExperimentPopulationsInner
 */
export interface ExperimentPopulationsInner {
    /**
     * 
     * @type {number}
     * @memberof ExperimentPopulationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentPopulationsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentPopulationsInner
     */
    'color': string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentPopulationsInner
     */
    'experiment': number | null;
    /**
     * 
     * @type {string}
     * @memberof ExperimentPopulationsInner
     */
    'atlas'?: ExperimentPopulationsInnerAtlasEnum;
    /**
     * 
     * @type {File}
     * @memberof ExperimentPopulationsInner
     */
    'cells': File;
    /**
     * 
     * @type {number}
     * @memberof ExperimentPopulationsInner
     */
    'opacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentPopulationsInner
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentPopulationsInner
     */
    'pdfs'?: string;
}

export const ExperimentPopulationsInnerAtlasEnum = {
    SalkCord10um: 'salk_cord_10um'
} as const;

export type ExperimentPopulationsInnerAtlasEnum = typeof ExperimentPopulationsInnerAtlasEnum[keyof typeof ExperimentPopulationsInnerAtlasEnum];

/**
 * 
 * @export
 * @interface ExperimentSingleFileUpload
 */
export interface ExperimentSingleFileUpload {
    /**
     * 
     * @type {File}
     * @memberof ExperimentSingleFileUpload
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface ExperimentTagsInner
 */
export interface ExperimentTagsInner {
    /**
     * 
     * @type {string}
     * @memberof ExperimentTagsInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {number}
     * @memberof Member
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface Pdf
 */
export interface Pdf {
    /**
     * 
     * @type {number}
     * @memberof Pdf
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Pdf
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pdf
     */
    'category': PdfCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof Pdf
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pdf
     */
    'created_by'?: string;
    /**
     * 
     * @type {File}
     * @memberof Pdf
     */
    'file': File;
    /**
     * 
     * @type {number}
     * @memberof Pdf
     */
    'experiment': number;
    /**
     * 
     * @type {number}
     * @memberof Pdf
     */
    'population': number;
}

export const PdfCategoryEnum = {
    Electrophysiology: 'ELECTROPHYSIOLOGY',
    Behaviour: 'BEHAVIOUR',
    IoMapping: 'IO_MAPPING'
} as const;

export type PdfCategoryEnum = typeof PdfCategoryEnum[keyof typeof PdfCategoryEnum];

/**
 * 
 * @export
 * @interface Population
 */
export interface Population {
    /**
     * 
     * @type {number}
     * @memberof Population
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Population
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Population
     */
    'color': string;
    /**
     * 
     * @type {number}
     * @memberof Population
     */
    'experiment': number | null;
    /**
     * 
     * @type {string}
     * @memberof Population
     */
    'atlas'?: PopulationAtlasEnum;
    /**
     * 
     * @type {File}
     * @memberof Population
     */
    'cells': File;
    /**
     * 
     * @type {number}
     * @memberof Population
     */
    'opacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Population
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Population
     */
    'pdfs'?: string;
}

export const PopulationAtlasEnum = {
    SalkCord10um: 'salk_cord_10um'
} as const;

export type PopulationAtlasEnum = typeof PopulationAtlasEnum[keyof typeof PopulationAtlasEnum];

/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Tags
 */
export interface Tags {
    /**
     * 
     * @type {Array<string>}
     * @memberof Tags
     */
    'tags': Array<string>;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * 
     * @type {number}
     * @memberof UserDetail
     */
    'id'?: number;
    /**
     * 
     * @type {UserDetailUser}
     * @memberof UserDetail
     */
    'user'?: UserDetailUser;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'notification_method'?: UserDetailNotificationMethodEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetail
     */
    'notify_on_new_share'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetail
     */
    'notify_on_new_team_invite'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetail
     */
    'notify_on_clone_my_experiment'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetail
     */
    'notify_on_news'?: boolean;
    /**
     * 
     * @type {File}
     * @memberof UserDetail
     */
    'avatar': File;
}

export const UserDetailNotificationMethodEnum = {
    Email: 'email'
} as const;

export type UserDetailNotificationMethodEnum = typeof UserDetailNotificationMethodEnum[keyof typeof UserDetailNotificationMethodEnum];

/**
 * 
 * @export
 * @interface UserDetailUser
 */
export interface UserDetailUser {
    /**
     * 
     * @type {number}
     * @memberof UserDetailUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDetailUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailUser
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface UserTeam
 */
export interface UserTeam {
    /**
     * 
     * @type {number}
     * @memberof UserTeam
     */
    'id'?: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof UserTeam
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserTeam
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeam
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeam
     */
    'email'?: string;
    /**
     * 
     * @type {Array<ExperimentOwnerGroupsInner>}
     * @memberof UserTeam
     */
    'groups'?: Array<ExperimentOwnerGroupsInner>;
    /**
     * 
     * @type {string}
     * @memberof UserTeam
     */
    'avatar': string;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Member} [member] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersGroup: async (id: string, member?: Member, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addMembersGroup', 'id', id)
            const localVarPath = `/api/teams/{id}/add_members/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(member, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {Array<string>} tags 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTagsExperiment: async (id: string, tags: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addTagsExperiment', 'id', id)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('addTagsExperiment', 'tags', tags)
            const localVarPath = `/api/experiments/{id}/tag/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }



            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cellsPopulation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cellsPopulation', 'id', id)
            const localVarPath = `/api/population/{id}/cells/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {string} subdivision 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        centroidsPopulation: async (id: string, subdivision: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('centroidsPopulation', 'id', id)
            // verify required parameter 'subdivision' is not null or undefined
            assertParamExists('centroidsPopulation', 'subdivision', subdivision)
            const localVarPath = `/api/population/{id}/centroids/{subdivision}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subdivision"}}`, encodeURIComponent(String(subdivision)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {string} subdivision 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contourPlotPopulation: async (id: string, subdivision: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contourPlotPopulation', 'id', id)
            // verify required parameter 'subdivision' is not null or undefined
            assertParamExists('contourPlotPopulation', 'subdivision', subdivision)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('contourPlotPopulation', 'type', type)
            const localVarPath = `/api/population/{id}/contour_plot/{subdivision}/{type}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subdivision"}}`, encodeURIComponent(String(subdivision)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollaborator: async (collaborator?: Collaborator, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/collaborator/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(collaborator, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExperiment: async (name: string, description: string, id?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createExperiment', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('createExperiment', 'description', description)
            const localVarPath = `/api/experiments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id !== undefined) {
                localVarFormParams.append('id', id as any);
            }

            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }

            if (isPrivate !== undefined) {
                localVarFormParams.append('is_private', isPrivate as any);
            }

            if (description !== undefined) {
                localVarFormParams.append('description', description as any);
            }

            if (dateCreated !== undefined) {
                localVarFormParams.append('date_created', dateCreated as any);
            }

            if (lastModified !== undefined) {
                localVarFormParams.append('last_modified', lastModified as any);
            }

            if (owner !== undefined) {
                localVarFormParams.append('owner', new Blob([JSON.stringify(owner)], { type: "application/json", }));
            }
            if (teams) {
                localVarFormParams.append('teams', teams.join(COLLECTION_FORMATS.csv));
            }

            if (collaborators) {
                localVarFormParams.append('collaborators', collaborators.join(COLLECTION_FORMATS.csv));
            }

            if (populations) {
                localVarFormParams.append('populations', populations.join(COLLECTION_FORMATS.csv));
            }

            if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }


            if (hasEditPermission !== undefined) {
                localVarFormParams.append('has_edit_permission', hasEditPermission as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (team?: Team, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {CreatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPdf: async (category: CreatePdfCategoryEnum, file: File, experiment: number, population: number, id?: number, name?: string, createdAt?: string, createdBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('createPdf', 'category', category)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createPdf', 'file', file)
            // verify required parameter 'experiment' is not null or undefined
            assertParamExists('createPdf', 'experiment', experiment)
            // verify required parameter 'population' is not null or undefined
            assertParamExists('createPdf', 'population', population)
            const localVarPath = `/api/pdf/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id !== undefined) {
                localVarFormParams.append('id', id as any);
            }

            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }

            if (category !== undefined) {
                localVarFormParams.append('category', category as any);
            }

            if (createdAt !== undefined) {
                localVarFormParams.append('created_at', createdAt as any);
            }

            if (createdBy !== undefined) {
                localVarFormParams.append('created_by', createdBy as any);
            }

            if (file !== undefined) {
                localVarFormParams.append('file', file as any);
            }

            if (experiment !== undefined) {
                localVarFormParams.append('experiment', experiment as any);
            }

            if (population !== undefined) {
                localVarFormParams.append('population', population as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulation: async (population?: Population, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/population/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(population, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserDetail: async (userDetail?: UserDetail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/userdetails/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userDetail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMemberGroup: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delMemberGroup', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('delMemberGroup', 'userId', userId)
            const localVarPath = `/api/teams/{id}/members/{user_id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} tagName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagExperiment: async (id: string, tagName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTagExperiment', 'id', id)
            // verify required parameter 'tagName' is not null or undefined
            assertParamExists('deleteTagExperiment', 'tagName', tagName)
            const localVarPath = `/api/experiments/{id}/tag/{tag_name}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"tag_name"}}`, encodeURIComponent(String(tagName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyCollaborator: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyCollaborator', 'id', id)
            const localVarPath = `/api/collaborator/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyExperiment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyExperiment', 'id', id)
            const localVarPath = `/api/experiments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyPdf: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyPdf', 'id', id)
            const localVarPath = `/api/pdf/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyPopulation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyPopulation', 'id', id)
            const localVarPath = `/api/population/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyUserDetail: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyUserDetail', 'id', id)
            const localVarPath = `/api/userdetails/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} activePopulations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPopulationsExperiment: async (id: string, activePopulations: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadPopulationsExperiment', 'id', id)
            // verify required parameter 'activePopulations' is not null or undefined
            assertParamExists('downloadPopulationsExperiment', 'activePopulations', activePopulations)
            const localVarPath = `/api/experiments/{id}/download_populations/{active_populations}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"active_populations"}}`, encodeURIComponent(String(activePopulations)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollaborators: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/collaborator/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExperiments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/experiments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pdf/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/population/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDetails: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/userdetails/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUserDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/userdetails/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('membersGroup', 'id', id)
            const localVarPath = `/api/teams/{id}/members/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mineExperiment: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/experiments/mine/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myteamsExperiment: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/experiments/myteams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCollaborator: async (id: string, collaborator?: Collaborator, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateCollaborator', 'id', id)
            const localVarPath = `/api/collaborator/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(collaborator, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id2] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateExperiment: async (id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateExperiment', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('partialUpdateExperiment', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('partialUpdateExperiment', 'description', description)
            const localVarPath = `/api/experiments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id2 !== undefined) {
                localVarFormParams.append('id', id2 as any);
            }

            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }

            if (isPrivate !== undefined) {
                localVarFormParams.append('is_private', isPrivate as any);
            }

            if (description !== undefined) {
                localVarFormParams.append('description', description as any);
            }

            if (dateCreated !== undefined) {
                localVarFormParams.append('date_created', dateCreated as any);
            }

            if (lastModified !== undefined) {
                localVarFormParams.append('last_modified', lastModified as any);
            }

            if (owner !== undefined) {
                localVarFormParams.append('owner', new Blob([JSON.stringify(owner)], { type: "application/json", }));
            }
            if (teams) {
                localVarFormParams.append('teams', teams.join(COLLECTION_FORMATS.csv));
            }

            if (collaborators) {
                localVarFormParams.append('collaborators', collaborators.join(COLLECTION_FORMATS.csv));
            }

            if (populations) {
                localVarFormParams.append('populations', populations.join(COLLECTION_FORMATS.csv));
            }

            if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }


            if (hasEditPermission !== undefined) {
                localVarFormParams.append('has_edit_permission', hasEditPermission as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateGroup: async (id: string, team?: Team, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateGroup', 'id', id)
            const localVarPath = `/api/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {PartialUpdatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id2] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdatePdf: async (id: string, category: PartialUpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdatePdf', 'id', id)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('partialUpdatePdf', 'category', category)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('partialUpdatePdf', 'file', file)
            // verify required parameter 'experiment' is not null or undefined
            assertParamExists('partialUpdatePdf', 'experiment', experiment)
            // verify required parameter 'population' is not null or undefined
            assertParamExists('partialUpdatePdf', 'population', population)
            const localVarPath = `/api/pdf/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id2 !== undefined) {
                localVarFormParams.append('id', id2 as any);
            }

            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }

            if (category !== undefined) {
                localVarFormParams.append('category', category as any);
            }

            if (createdAt !== undefined) {
                localVarFormParams.append('created_at', createdAt as any);
            }

            if (createdBy !== undefined) {
                localVarFormParams.append('created_by', createdBy as any);
            }

            if (file !== undefined) {
                localVarFormParams.append('file', file as any);
            }

            if (experiment !== undefined) {
                localVarFormParams.append('experiment', experiment as any);
            }

            if (population !== undefined) {
                localVarFormParams.append('population', population as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdatePopulation: async (id: string, population?: Population, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdatePopulation', 'id', id)
            const localVarPath = `/api/population/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(population, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateUserDetail: async (id: string, userDetail?: UserDetail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateUserDetail', 'id', id)
            const localVarPath = `/api/userdetails/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userDetail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicExperiment: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/experiments/public/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        residentialPopulation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/population/residential/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollaborator: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveCollaborator', 'id', id)
            const localVarPath = `/api/collaborator/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveExperiment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveExperiment', 'id', id)
            const localVarPath = `/api/experiments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveGroup', 'id', id)
            const localVarPath = `/api/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePdf: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrievePdf', 'id', id)
            const localVarPath = `/api/pdf/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {number} [experimentId] Optional experiment ID to filter PDFs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePopulation: async (id: string, experimentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrievePopulation', 'id', id)
            const localVarPath = `/api/population/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveUserDetail: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveUserDetail', 'id', id)
            const localVarPath = `/api/userdetails/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedwithmeExperiment: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/experiments/sharedwithme/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollaborator: async (id: string, collaborator?: Collaborator, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCollaborator', 'id', id)
            const localVarPath = `/api/collaborator/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(collaborator, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id2] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment: async (id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateExperiment', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateExperiment', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('updateExperiment', 'description', description)
            const localVarPath = `/api/experiments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id2 !== undefined) {
                localVarFormParams.append('id', id2 as any);
            }

            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }

            if (isPrivate !== undefined) {
                localVarFormParams.append('is_private', isPrivate as any);
            }

            if (description !== undefined) {
                localVarFormParams.append('description', description as any);
            }

            if (dateCreated !== undefined) {
                localVarFormParams.append('date_created', dateCreated as any);
            }

            if (lastModified !== undefined) {
                localVarFormParams.append('last_modified', lastModified as any);
            }

            if (owner !== undefined) {
                localVarFormParams.append('owner', new Blob([JSON.stringify(owner)], { type: "application/json", }));
            }
            if (teams) {
                localVarFormParams.append('teams', teams.join(COLLECTION_FORMATS.csv));
            }

            if (collaborators) {
                localVarFormParams.append('collaborators', collaborators.join(COLLECTION_FORMATS.csv));
            }

            if (populations) {
                localVarFormParams.append('populations', populations.join(COLLECTION_FORMATS.csv));
            }

            if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }


            if (hasEditPermission !== undefined) {
                localVarFormParams.append('has_edit_permission', hasEditPermission as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (id: string, team?: Team, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroup', 'id', id)
            const localVarPath = `/api/teams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {UpdatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id2] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePdf: async (id: string, category: UpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePdf', 'id', id)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('updatePdf', 'category', category)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('updatePdf', 'file', file)
            // verify required parameter 'experiment' is not null or undefined
            assertParamExists('updatePdf', 'experiment', experiment)
            // verify required parameter 'population' is not null or undefined
            assertParamExists('updatePdf', 'population', population)
            const localVarPath = `/api/pdf/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (id2 !== undefined) {
                localVarFormParams.append('id', id2 as any);
            }

            if (name !== undefined) {
                localVarFormParams.append('name', name as any);
            }

            if (category !== undefined) {
                localVarFormParams.append('category', category as any);
            }

            if (createdAt !== undefined) {
                localVarFormParams.append('created_at', createdAt as any);
            }

            if (createdBy !== undefined) {
                localVarFormParams.append('created_by', createdBy as any);
            }

            if (file !== undefined) {
                localVarFormParams.append('file', file as any);
            }

            if (experiment !== undefined) {
                localVarFormParams.append('experiment', experiment as any);
            }

            if (population !== undefined) {
                localVarFormParams.append('population', population as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePopulation: async (id: string, population?: Population, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePopulation', 'id', id)
            const localVarPath = `/api/population/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(population, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDetail: async (id: string, userDetail?: UserDetail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUserDetail', 'id', id)
            const localVarPath = `/api/userdetails/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userDetail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {File} keyFile 
         * @param {File} dataFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPairFilesExperiment: async (id: string, keyFile: File, dataFile: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadPairFilesExperiment', 'id', id)
            // verify required parameter 'keyFile' is not null or undefined
            assertParamExists('uploadPairFilesExperiment', 'keyFile', keyFile)
            // verify required parameter 'dataFile' is not null or undefined
            assertParamExists('uploadPairFilesExperiment', 'dataFile', dataFile)
            const localVarPath = `/api/experiments/{id}/upload-pair-files/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (keyFile !== undefined) {
                localVarFormParams.append('key_file', keyFile as any);
            }

            if (dataFile !== undefined) {
                localVarFormParams.append('data_file', dataFile as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSingleFileExperiment: async (id: string, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadSingleFileExperiment', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadSingleFileExperiment', 'file', file)
            const localVarPath = `/api/experiments/{id}/upload-single-file/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) {
                localVarFormParams.append('file', file as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Member} [member] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMembersGroup(id: string, member?: Member, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Member>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMembersGroup(id, member, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.addMembersGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {Array<string>} tags 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTagsExperiment(id: string, tags: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tags>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTagsExperiment(id, tags, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.addTagsExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cellsPopulation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Population>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cellsPopulation(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.cellsPopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {string} subdivision 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async centroidsPopulation(id: string, subdivision: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Population>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.centroidsPopulation(id, subdivision, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.centroidsPopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {string} subdivision 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contourPlotPopulation(id: string, subdivision: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Population>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contourPlotPopulation(id, subdivision, type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.contourPlotPopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCollaborator(collaborator?: Collaborator, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collaborator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCollaborator(collaborator, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.createCollaborator']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExperiment(name: string, description: string, id?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExperiment(name, description, id, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.createExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(team?: Team, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(team, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.createGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {CreatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPdf(category: CreatePdfCategoryEnum, file: File, experiment: number, population: number, id?: number, name?: string, createdAt?: string, createdBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pdf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPdf(category, file, experiment, population, id, name, createdAt, createdBy, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.createPdf']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPopulation(population?: Population, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Population>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPopulation(population, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.createPopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserDetail(userDetail?: UserDetail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserDetail(userDetail, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.createUserDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delMemberGroup(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delMemberGroup(id, userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.delMemberGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} tagName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTagExperiment(id: string, tagName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTagExperiment(id, tagName, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.deleteTagExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyCollaborator(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyCollaborator(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.destroyCollaborator']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyExperiment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyExperiment(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.destroyExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyPdf(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyPdf(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.destroyPdf']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyPopulation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyPopulation(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.destroyPopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyUserDetail(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyUserDetail(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.destroyUserDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} activePopulations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadPopulationsExperiment(id: string, activePopulations: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadPopulations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadPopulationsExperiment(id, activePopulations, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.downloadPopulationsExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollaborators(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Collaborator>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollaborators(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listCollaborators']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExperiments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Experiment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExperiments(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listExperiments']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listGroups']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdfs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pdf>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdfs(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listPdfs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPopulations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Population>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPopulations(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listPopulations']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTags(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTags(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listTags']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserDetails(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserDetails(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listUserDetails']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTeam>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.listUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meUserDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meUserDetail(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.meUserDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membersGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membersGroup(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.membersGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mineExperiment(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mineExperiment(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.mineExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myteamsExperiment(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myteamsExperiment(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.myteamsExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateCollaborator(id: string, collaborator?: Collaborator, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collaborator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateCollaborator(id, collaborator, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.partialUpdateCollaborator']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id2] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateExperiment(id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateExperiment(id, name, description, id2, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.partialUpdateExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateGroup(id: string, team?: Team, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateGroup(id, team, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.partialUpdateGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {PartialUpdatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id2] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdatePdf(id: string, category: PartialUpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pdf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdatePdf(id, category, file, experiment, population, id2, name, createdAt, createdBy, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.partialUpdatePdf']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdatePopulation(id: string, population?: Population, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Population>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdatePopulation(id, population, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.partialUpdatePopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateUserDetail(id: string, userDetail?: UserDetail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateUserDetail(id, userDetail, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.partialUpdateUserDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicExperiment(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicExperiment(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.publicExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async residentialPopulation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Population>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.residentialPopulation(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.residentialPopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveCollaborator(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collaborator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCollaborator(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.retrieveCollaborator']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveExperiment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveExperiment(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.retrieveExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveGroup(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.retrieveGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievePdf(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pdf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievePdf(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.retrievePdf']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {number} [experimentId] Optional experiment ID to filter PDFs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrievePopulation(id: string, experimentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Population>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrievePopulation(id, experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.retrievePopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveUserDetail(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveUserDetail(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.retrieveUserDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sharedwithmeExperiment(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sharedwithmeExperiment(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.sharedwithmeExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollaborator(id: string, collaborator?: Collaborator, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collaborator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollaborator(id, collaborator, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.updateCollaborator']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id2] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExperiment(id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExperiment(id, name, description, id2, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.updateExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(id: string, team?: Team, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(id, team, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.updateGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {UpdatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id2] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePdf(id: string, category: UpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pdf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePdf(id, category, file, experiment, population, id2, name, createdAt, createdBy, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.updatePdf']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePopulation(id: string, population?: Population, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Population>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePopulation(id, population, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.updatePopulation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserDetail(id: string, userDetail?: UserDetail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserDetail(id, userDetail, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.updateUserDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {File} keyFile 
         * @param {File} dataFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPairFilesExperiment(id: string, keyFile: File, dataFile: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperimentPairFileUpload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPairFilesExperiment(id, keyFile, dataFile, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.uploadPairFilesExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadSingleFileExperiment(id: string, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperimentSingleFileUpload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadSingleFileExperiment(id, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.uploadSingleFileExperiment']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Member} [member] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersGroup(id: string, member?: Member, options?: any): AxiosPromise<Member> {
            return localVarFp.addMembersGroup(id, member, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {Array<string>} tags 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTagsExperiment(id: string, tags: Array<string>, options?: any): AxiosPromise<Tags> {
            return localVarFp.addTagsExperiment(id, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cellsPopulation(id: string, options?: any): AxiosPromise<Population> {
            return localVarFp.cellsPopulation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {string} subdivision 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        centroidsPopulation(id: string, subdivision: string, options?: any): AxiosPromise<Population> {
            return localVarFp.centroidsPopulation(id, subdivision, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {string} subdivision 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contourPlotPopulation(id: string, subdivision: string, type: string, options?: any): AxiosPromise<Population> {
            return localVarFp.contourPlotPopulation(id, subdivision, type, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollaborator(collaborator?: Collaborator, options?: any): AxiosPromise<Collaborator> {
            return localVarFp.createCollaborator(collaborator, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExperiment(name: string, description: string, id?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: any): AxiosPromise<Experiment> {
            return localVarFp.createExperiment(name, description, id, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(team?: Team, options?: any): AxiosPromise<Team> {
            return localVarFp.createGroup(team, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {CreatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPdf(category: CreatePdfCategoryEnum, file: File, experiment: number, population: number, id?: number, name?: string, createdAt?: string, createdBy?: string, options?: any): AxiosPromise<Pdf> {
            return localVarFp.createPdf(category, file, experiment, population, id, name, createdAt, createdBy, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPopulation(population?: Population, options?: any): AxiosPromise<Population> {
            return localVarFp.createPopulation(population, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserDetail(userDetail?: UserDetail, options?: any): AxiosPromise<UserDetail> {
            return localVarFp.createUserDetail(userDetail, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delMemberGroup(id: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.delMemberGroup(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} tagName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagExperiment(id: string, tagName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTagExperiment(id, tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyCollaborator(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyCollaborator(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyExperiment(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyExperiment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyPdf(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyPdf(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyPopulation(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyPopulation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyUserDetail(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyUserDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} activePopulations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPopulationsExperiment(id: string, activePopulations: string, options?: any): AxiosPromise<DownloadPopulations> {
            return localVarFp.downloadPopulationsExperiment(id, activePopulations, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollaborators(options?: any): AxiosPromise<Array<Collaborator>> {
            return localVarFp.listCollaborators(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExperiments(options?: any): AxiosPromise<Array<Experiment>> {
            return localVarFp.listExperiments(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(options?: any): AxiosPromise<Array<Team>> {
            return localVarFp.listGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfs(options?: any): AxiosPromise<Array<Pdf>> {
            return localVarFp.listPdfs(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPopulations(options?: any): AxiosPromise<Array<Population>> {
            return localVarFp.listPopulations(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(options?: any): AxiosPromise<Array<Tag>> {
            return localVarFp.listTags(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserDetails(options?: any): AxiosPromise<Array<UserDetail>> {
            return localVarFp.listUserDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(options?: any): AxiosPromise<Array<UserTeam>> {
            return localVarFp.listUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUserDetail(options?: any): AxiosPromise<UserDetail> {
            return localVarFp.meUserDetail(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersGroup(id: string, options?: any): AxiosPromise<Team> {
            return localVarFp.membersGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mineExperiment(options?: any): AxiosPromise<Experiment> {
            return localVarFp.mineExperiment(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myteamsExperiment(options?: any): AxiosPromise<Experiment> {
            return localVarFp.myteamsExperiment(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateCollaborator(id: string, collaborator?: Collaborator, options?: any): AxiosPromise<Collaborator> {
            return localVarFp.partialUpdateCollaborator(id, collaborator, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id2] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateExperiment(id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: any): AxiosPromise<Experiment> {
            return localVarFp.partialUpdateExperiment(id, name, description, id2, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateGroup(id: string, team?: Team, options?: any): AxiosPromise<Team> {
            return localVarFp.partialUpdateGroup(id, team, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {PartialUpdatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id2] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdatePdf(id: string, category: PartialUpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options?: any): AxiosPromise<Pdf> {
            return localVarFp.partialUpdatePdf(id, category, file, experiment, population, id2, name, createdAt, createdBy, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdatePopulation(id: string, population?: Population, options?: any): AxiosPromise<Population> {
            return localVarFp.partialUpdatePopulation(id, population, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateUserDetail(id: string, userDetail?: UserDetail, options?: any): AxiosPromise<UserDetail> {
            return localVarFp.partialUpdateUserDetail(id, userDetail, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicExperiment(options?: any): AxiosPromise<Experiment> {
            return localVarFp.publicExperiment(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        residentialPopulation(options?: any): AxiosPromise<Array<Population>> {
            return localVarFp.residentialPopulation(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveCollaborator(id: string, options?: any): AxiosPromise<Collaborator> {
            return localVarFp.retrieveCollaborator(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveExperiment(id: string, options?: any): AxiosPromise<Experiment> {
            return localVarFp.retrieveExperiment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGroup(id: string, options?: any): AxiosPromise<Team> {
            return localVarFp.retrieveGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePdf(id: string, options?: any): AxiosPromise<Pdf> {
            return localVarFp.retrievePdf(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {number} [experimentId] Optional experiment ID to filter PDFs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievePopulation(id: string, experimentId?: number, options?: any): AxiosPromise<Population> {
            return localVarFp.retrievePopulation(id, experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveUserDetail(id: string, options?: any): AxiosPromise<UserDetail> {
            return localVarFp.retrieveUserDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sharedwithmeExperiment(options?: any): AxiosPromise<Experiment> {
            return localVarFp.sharedwithmeExperiment(options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this collaborator.
         * @param {Collaborator} [collaborator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollaborator(id: string, collaborator?: Collaborator, options?: any): AxiosPromise<Collaborator> {
            return localVarFp.updateCollaborator(id, collaborator, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {string} name 
         * @param {string} description 
         * @param {number} [id2] 
         * @param {boolean} [isPrivate] 
         * @param {string} [dateCreated] 
         * @param {string} [lastModified] 
         * @param {ExperimentOwner} [owner] 
         * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
         * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
         * @param {Array<ExperimentPopulationsInner>} [populations] 
         * @param {Array<ExperimentTagsInner>} [tags] 
         * @param {string} [hasEditPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment(id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: any): AxiosPromise<Experiment> {
            return localVarFp.updateExperiment(id, name, description, id2, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
         * @param {string} id A unique integer value identifying this group.
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(id: string, team?: Team, options?: any): AxiosPromise<Team> {
            return localVarFp.updateGroup(id, team, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this pdf.
         * @param {UpdatePdfCategoryEnum} category 
         * @param {File} file 
         * @param {number} experiment 
         * @param {number} population 
         * @param {number} [id2] 
         * @param {string} [name] 
         * @param {string} [createdAt] 
         * @param {string} [createdBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePdf(id: string, category: UpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options?: any): AxiosPromise<Pdf> {
            return localVarFp.updatePdf(id, category, file, experiment, population, id2, name, createdAt, createdBy, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list` actions.
         * @param {string} id A unique integer value identifying this population.
         * @param {Population} [population] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePopulation(id: string, population?: Population, options?: any): AxiosPromise<Population> {
            return localVarFp.updatePopulation(id, population, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
         * @param {string} id A unique integer value identifying this user detail.
         * @param {UserDetail} [userDetail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDetail(id: string, userDetail?: UserDetail, options?: any): AxiosPromise<UserDetail> {
            return localVarFp.updateUserDetail(id, userDetail, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {File} keyFile 
         * @param {File} dataFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPairFilesExperiment(id: string, keyFile: File, dataFile: File, options?: any): AxiosPromise<ExperimentPairFileUpload> {
            return localVarFp.uploadPairFilesExperiment(id, keyFile, dataFile, options).then((request) => request(axios, basePath));
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} id A unique integer value identifying this experiment.
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSingleFileExperiment(id: string, file: File, options?: any): AxiosPromise<ExperimentSingleFileUpload> {
            return localVarFp.uploadSingleFileExperiment(id, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {string} id A unique integer value identifying this group.
     * @param {Member} [member] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public addMembersGroup(id: string, member?: Member, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).addMembersGroup(id, member, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {Array<string>} tags 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public addTagsExperiment(id: string, tags: Array<string>, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).addTagsExperiment(id, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this population.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public cellsPopulation(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).cellsPopulation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this population.
     * @param {string} subdivision 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public centroidsPopulation(id: string, subdivision: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).centroidsPopulation(id, subdivision, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this population.
     * @param {string} subdivision 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public contourPlotPopulation(id: string, subdivision: string, type: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).contourPlotPopulation(id, subdivision, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {Collaborator} [collaborator] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public createCollaborator(collaborator?: Collaborator, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).createCollaborator(collaborator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} name 
     * @param {string} description 
     * @param {number} [id] 
     * @param {boolean} [isPrivate] 
     * @param {string} [dateCreated] 
     * @param {string} [lastModified] 
     * @param {ExperimentOwner} [owner] 
     * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
     * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
     * @param {Array<ExperimentPopulationsInner>} [populations] 
     * @param {Array<ExperimentTagsInner>} [tags] 
     * @param {string} [hasEditPermission] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public createExperiment(name: string, description: string, id?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).createExperiment(name, description, id, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {Team} [team] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public createGroup(team?: Team, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).createGroup(team, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {CreatePdfCategoryEnum} category 
     * @param {File} file 
     * @param {number} experiment 
     * @param {number} population 
     * @param {number} [id] 
     * @param {string} [name] 
     * @param {string} [createdAt] 
     * @param {string} [createdBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public createPdf(category: CreatePdfCategoryEnum, file: File, experiment: number, population: number, id?: number, name?: string, createdAt?: string, createdBy?: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).createPdf(category, file, experiment, population, id, name, createdAt, createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {Population} [population] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public createPopulation(population?: Population, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).createPopulation(population, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
     * @param {UserDetail} [userDetail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public createUserDetail(userDetail?: UserDetail, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).createUserDetail(userDetail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {string} id A unique integer value identifying this group.
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public delMemberGroup(id: string, userId: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).delMemberGroup(id, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {string} tagName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public deleteTagExperiment(id: string, tagName: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).deleteTagExperiment(id, tagName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this collaborator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public destroyCollaborator(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).destroyCollaborator(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public destroyExperiment(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).destroyExperiment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this pdf.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public destroyPdf(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).destroyPdf(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this population.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public destroyPopulation(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).destroyPopulation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
     * @param {string} id A unique integer value identifying this user detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public destroyUserDetail(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).destroyUserDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {string} activePopulations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public downloadPopulationsExperiment(id: string, activePopulations: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).downloadPopulationsExperiment(id, activePopulations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listCollaborators(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listCollaborators(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listExperiments(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listExperiments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listGroups(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listPdfs(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listPdfs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listPopulations(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listPopulations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listTags(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listTags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listUserDetails(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listUserDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listUsers(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).listUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public meUserDetail(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).meUserDetail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {string} id A unique integer value identifying this group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public membersGroup(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).membersGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public mineExperiment(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).mineExperiment(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public myteamsExperiment(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).myteamsExperiment(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this collaborator.
     * @param {Collaborator} [collaborator] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public partialUpdateCollaborator(id: string, collaborator?: Collaborator, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).partialUpdateCollaborator(id, collaborator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {string} name 
     * @param {string} description 
     * @param {number} [id2] 
     * @param {boolean} [isPrivate] 
     * @param {string} [dateCreated] 
     * @param {string} [lastModified] 
     * @param {ExperimentOwner} [owner] 
     * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
     * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
     * @param {Array<ExperimentPopulationsInner>} [populations] 
     * @param {Array<ExperimentTagsInner>} [tags] 
     * @param {string} [hasEditPermission] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public partialUpdateExperiment(id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).partialUpdateExperiment(id, name, description, id2, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {string} id A unique integer value identifying this group.
     * @param {Team} [team] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public partialUpdateGroup(id: string, team?: Team, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).partialUpdateGroup(id, team, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this pdf.
     * @param {PartialUpdatePdfCategoryEnum} category 
     * @param {File} file 
     * @param {number} experiment 
     * @param {number} population 
     * @param {number} [id2] 
     * @param {string} [name] 
     * @param {string} [createdAt] 
     * @param {string} [createdBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public partialUpdatePdf(id: string, category: PartialUpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).partialUpdatePdf(id, category, file, experiment, population, id2, name, createdAt, createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this population.
     * @param {Population} [population] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public partialUpdatePopulation(id: string, population?: Population, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).partialUpdatePopulation(id, population, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
     * @param {string} id A unique integer value identifying this user detail.
     * @param {UserDetail} [userDetail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public partialUpdateUserDetail(id: string, userDetail?: UserDetail, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).partialUpdateUserDetail(id, userDetail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public publicExperiment(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).publicExperiment(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public residentialPopulation(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).residentialPopulation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this collaborator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public retrieveCollaborator(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).retrieveCollaborator(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public retrieveExperiment(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).retrieveExperiment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {string} id A unique integer value identifying this group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public retrieveGroup(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).retrieveGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this pdf.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public retrievePdf(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).retrievePdf(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this population.
     * @param {number} [experimentId] Optional experiment ID to filter PDFs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public retrievePopulation(id: string, experimentId?: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).retrievePopulation(id, experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
     * @param {string} id A unique integer value identifying this user detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public retrieveUserDetail(id: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).retrieveUserDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public sharedwithmeExperiment(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).sharedwithmeExperiment(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this collaborator.
     * @param {Collaborator} [collaborator] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public updateCollaborator(id: string, collaborator?: Collaborator, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).updateCollaborator(id, collaborator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {string} name 
     * @param {string} description 
     * @param {number} [id2] 
     * @param {boolean} [isPrivate] 
     * @param {string} [dateCreated] 
     * @param {string} [lastModified] 
     * @param {ExperimentOwner} [owner] 
     * @param {Array<ExperimentOwnerGroupsInner>} [teams] 
     * @param {Array<ExperimentCollaboratorsInner>} [collaborators] 
     * @param {Array<ExperimentPopulationsInner>} [populations] 
     * @param {Array<ExperimentTagsInner>} [tags] 
     * @param {string} [hasEditPermission] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public updateExperiment(id: string, name: string, description: string, id2?: number, isPrivate?: boolean, dateCreated?: string, lastModified?: string, owner?: ExperimentOwner, teams?: Array<ExperimentOwnerGroupsInner>, collaborators?: Array<ExperimentCollaboratorsInner>, populations?: Array<ExperimentPopulationsInner>, tags?: Array<ExperimentTagsInner>, hasEditPermission?: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).updateExperiment(id, name, description, id2, isPrivate, dateCreated, lastModified, owner, teams, collaborators, populations, tags, hasEditPermission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  Additionally we also provide extra `magic` actions `members`, `members add` and `members delete`.
     * @param {string} id A unique integer value identifying this group.
     * @param {Team} [team] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public updateGroup(id: string, team?: Team, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).updateGroup(id, team, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this pdf.
     * @param {UpdatePdfCategoryEnum} category 
     * @param {File} file 
     * @param {number} experiment 
     * @param {number} population 
     * @param {number} [id2] 
     * @param {string} [name] 
     * @param {string} [createdAt] 
     * @param {string} [createdBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public updatePdf(id: string, category: UpdatePdfCategoryEnum, file: File, experiment: number, population: number, id2?: number, name?: string, createdAt?: string, createdBy?: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).updatePdf(id, category, file, experiment, population, id2, name, createdAt, createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list` actions.
     * @param {string} id A unique integer value identifying this population.
     * @param {Population} [population] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public updatePopulation(id: string, population?: Population, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).updatePopulation(id, population, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` actions.  The list action will always return the current user\'s userdetail as a list or an empty list if the current user has no userdetail
     * @param {string} id A unique integer value identifying this user detail.
     * @param {UserDetail} [userDetail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public updateUserDetail(id: string, userDetail?: UserDetail, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).updateUserDetail(id, userDetail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {File} keyFile 
     * @param {File} dataFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public uploadPairFilesExperiment(id: string, keyFile: File, dataFile: File, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).uploadPairFilesExperiment(id, keyFile, dataFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} id A unique integer value identifying this experiment.
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public uploadSingleFileExperiment(id: string, file: File, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).uploadSingleFileExperiment(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreatePdfCategoryEnum = {
    Electrophysiology: 'ELECTROPHYSIOLOGY',
    Behaviour: 'BEHAVIOUR',
    IoMapping: 'IO_MAPPING'
} as const;
export type CreatePdfCategoryEnum = typeof CreatePdfCategoryEnum[keyof typeof CreatePdfCategoryEnum];
/**
 * @export
 */
export const PartialUpdatePdfCategoryEnum = {
    Electrophysiology: 'ELECTROPHYSIOLOGY',
    Behaviour: 'BEHAVIOUR',
    IoMapping: 'IO_MAPPING'
} as const;
export type PartialUpdatePdfCategoryEnum = typeof PartialUpdatePdfCategoryEnum[keyof typeof PartialUpdatePdfCategoryEnum];
/**
 * @export
 */
export const UpdatePdfCategoryEnum = {
    Electrophysiology: 'ELECTROPHYSIOLOGY',
    Behaviour: 'BEHAVIOUR',
    IoMapping: 'IO_MAPPING'
} as const;
export type UpdatePdfCategoryEnum = typeof UpdatePdfCategoryEnum[keyof typeof UpdatePdfCategoryEnum];



